
PROJECT_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  000060a4  2**0
                  CONTENTS
  4 .ARM          00000000  080044d0  080044d0  000060a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d0  080044d0  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080044d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200000a4  0800457c  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800457c  000063ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c23d  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240b  00000000  00000000  0001230a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00014718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  000154c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001932d  00000000  00000000  00015f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013524  00000000  00000000  0002f26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab36  00000000  00000000  0004278e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000cd308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080043a8 	.word	0x080043a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	080043a8 	.word	0x080043a8

0800014c <getKeyInput>:
// Flags for button presses
int button1_flag = 0, button2_flag = 0, button3_flag = 0;


// Function to handle button input with debouncing
void getKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    // Button 1
    Button1Reg2 = Button1Reg1;
 8000150:	4b44      	ldr	r3, [pc, #272]	@ (8000264 <getKeyInput+0x118>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a44      	ldr	r2, [pc, #272]	@ (8000268 <getKeyInput+0x11c>)
 8000156:	6013      	str	r3, [r2, #0]
    Button1Reg1 = Button1Reg0;
 8000158:	4b44      	ldr	r3, [pc, #272]	@ (800026c <getKeyInput+0x120>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a41      	ldr	r2, [pc, #260]	@ (8000264 <getKeyInput+0x118>)
 800015e:	6013      	str	r3, [r2, #0]
    Button1Reg0 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000160:	2110      	movs	r1, #16
 8000162:	4843      	ldr	r0, [pc, #268]	@ (8000270 <getKeyInput+0x124>)
 8000164:	f001 ff9e 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b3f      	ldr	r3, [pc, #252]	@ (800026c <getKeyInput+0x120>)
 800016e:	601a      	str	r2, [r3, #0]

    if ((Button1Reg1 == Button1Reg0) && (Button1Reg1 == Button1Reg2)) {
 8000170:	4b3c      	ldr	r3, [pc, #240]	@ (8000264 <getKeyInput+0x118>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b3d      	ldr	r3, [pc, #244]	@ (800026c <getKeyInput+0x120>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	429a      	cmp	r2, r3
 800017a:	d116      	bne.n	80001aa <getKeyInput+0x5e>
 800017c:	4b39      	ldr	r3, [pc, #228]	@ (8000264 <getKeyInput+0x118>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b39      	ldr	r3, [pc, #228]	@ (8000268 <getKeyInput+0x11c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d110      	bne.n	80001aa <getKeyInput+0x5e>
        if (Button1Reg2 != Button1Reg3) {
 8000188:	4b37      	ldr	r3, [pc, #220]	@ (8000268 <getKeyInput+0x11c>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b39      	ldr	r3, [pc, #228]	@ (8000274 <getKeyInput+0x128>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d00a      	beq.n	80001aa <getKeyInput+0x5e>
            Button1Reg3 = Button1Reg2;
 8000194:	4b34      	ldr	r3, [pc, #208]	@ (8000268 <getKeyInput+0x11c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a36      	ldr	r2, [pc, #216]	@ (8000274 <getKeyInput+0x128>)
 800019a:	6013      	str	r3, [r2, #0]
            if (Button1Reg3 == PRESSED_STATE) button1_flag = 1;
 800019c:	4b35      	ldr	r3, [pc, #212]	@ (8000274 <getKeyInput+0x128>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d102      	bne.n	80001aa <getKeyInput+0x5e>
 80001a4:	4b34      	ldr	r3, [pc, #208]	@ (8000278 <getKeyInput+0x12c>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
        }
    }

    // Button 2
    Button2Reg2 = Button2Reg1;
 80001aa:	4b34      	ldr	r3, [pc, #208]	@ (800027c <getKeyInput+0x130>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a34      	ldr	r2, [pc, #208]	@ (8000280 <getKeyInput+0x134>)
 80001b0:	6013      	str	r3, [r2, #0]
    Button2Reg1 = Button2Reg0;
 80001b2:	4b34      	ldr	r3, [pc, #208]	@ (8000284 <getKeyInput+0x138>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a31      	ldr	r2, [pc, #196]	@ (800027c <getKeyInput+0x130>)
 80001b8:	6013      	str	r3, [r2, #0]
    Button2Reg0 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ba:	2102      	movs	r1, #2
 80001bc:	482c      	ldr	r0, [pc, #176]	@ (8000270 <getKeyInput+0x124>)
 80001be:	f001 ff71 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000284 <getKeyInput+0x138>)
 80001c8:	601a      	str	r2, [r3, #0]

    if ((Button2Reg1 == Button2Reg0) && (Button2Reg1 == Button2Reg2)) {
 80001ca:	4b2c      	ldr	r3, [pc, #176]	@ (800027c <getKeyInput+0x130>)
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000284 <getKeyInput+0x138>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d116      	bne.n	8000204 <getKeyInput+0xb8>
 80001d6:	4b29      	ldr	r3, [pc, #164]	@ (800027c <getKeyInput+0x130>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	4b29      	ldr	r3, [pc, #164]	@ (8000280 <getKeyInput+0x134>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d110      	bne.n	8000204 <getKeyInput+0xb8>
        if (Button2Reg2 != Button2Reg3) {
 80001e2:	4b27      	ldr	r3, [pc, #156]	@ (8000280 <getKeyInput+0x134>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	4b28      	ldr	r3, [pc, #160]	@ (8000288 <getKeyInput+0x13c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d00a      	beq.n	8000204 <getKeyInput+0xb8>
            Button2Reg3 = Button2Reg2;
 80001ee:	4b24      	ldr	r3, [pc, #144]	@ (8000280 <getKeyInput+0x134>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a25      	ldr	r2, [pc, #148]	@ (8000288 <getKeyInput+0x13c>)
 80001f4:	6013      	str	r3, [r2, #0]
            if (Button2Reg3 == PRESSED_STATE) button2_flag = 1;
 80001f6:	4b24      	ldr	r3, [pc, #144]	@ (8000288 <getKeyInput+0x13c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d102      	bne.n	8000204 <getKeyInput+0xb8>
 80001fe:	4b23      	ldr	r3, [pc, #140]	@ (800028c <getKeyInput+0x140>)
 8000200:	2201      	movs	r2, #1
 8000202:	601a      	str	r2, [r3, #0]
        }
    }

    // Button 3
    Button3Reg2 = Button3Reg1;
 8000204:	4b22      	ldr	r3, [pc, #136]	@ (8000290 <getKeyInput+0x144>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	@ (8000294 <getKeyInput+0x148>)
 800020a:	6013      	str	r3, [r2, #0]
    Button3Reg1 = Button3Reg0;
 800020c:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <getKeyInput+0x14c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	@ (8000290 <getKeyInput+0x144>)
 8000212:	6013      	str	r3, [r2, #0]
    Button3Reg0 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000214:	2101      	movs	r1, #1
 8000216:	4816      	ldr	r0, [pc, #88]	@ (8000270 <getKeyInput+0x124>)
 8000218:	f001 ff44 	bl	80020a4 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b1d      	ldr	r3, [pc, #116]	@ (8000298 <getKeyInput+0x14c>)
 8000222:	601a      	str	r2, [r3, #0]

    if ((Button3Reg1 == Button3Reg0) && (Button3Reg1 == Button3Reg2)) {
 8000224:	4b1a      	ldr	r3, [pc, #104]	@ (8000290 <getKeyInput+0x144>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <getKeyInput+0x14c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d116      	bne.n	800025e <getKeyInput+0x112>
 8000230:	4b17      	ldr	r3, [pc, #92]	@ (8000290 <getKeyInput+0x144>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b17      	ldr	r3, [pc, #92]	@ (8000294 <getKeyInput+0x148>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d110      	bne.n	800025e <getKeyInput+0x112>
        if (Button3Reg2 != Button3Reg3) {
 800023c:	4b15      	ldr	r3, [pc, #84]	@ (8000294 <getKeyInput+0x148>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <getKeyInput+0x150>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00a      	beq.n	800025e <getKeyInput+0x112>
            Button3Reg3 = Button3Reg2;
 8000248:	4b12      	ldr	r3, [pc, #72]	@ (8000294 <getKeyInput+0x148>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a13      	ldr	r2, [pc, #76]	@ (800029c <getKeyInput+0x150>)
 800024e:	6013      	str	r3, [r2, #0]
            if (Button3Reg3 == PRESSED_STATE) button3_flag = 1;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <getKeyInput+0x150>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d102      	bne.n	800025e <getKeyInput+0x112>
 8000258:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <getKeyInput+0x154>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
        }
    }
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000
 8000270:	40010800 	.word	0x40010800
 8000274:	2000000c 	.word	0x2000000c
 8000278:	200000c0 	.word	0x200000c0
 800027c:	20000014 	.word	0x20000014
 8000280:	20000018 	.word	0x20000018
 8000284:	20000010 	.word	0x20000010
 8000288:	2000001c 	.word	0x2000001c
 800028c:	200000c4 	.word	0x200000c4
 8000290:	20000024 	.word	0x20000024
 8000294:	20000028 	.word	0x20000028
 8000298:	20000020 	.word	0x20000020
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	200000c8 	.word	0x200000c8

080002a4 <init_automatic>:
#include "fsm_automatic.h"

void init_automatic()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    //setup timer
	setTimer (0 ,1000);
 80002a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002ac:	2000      	movs	r0, #0
 80002ae:	f001 fa4f 	bl	8001750 <setTimer>
	//setup đèn giao thông
	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b8:	482c      	ldr	r0, [pc, #176]	@ (800036c <init_automatic+0xc8>)
 80002ba:	f001 ff0a 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002c4:	4829      	ldr	r0, [pc, #164]	@ (800036c <init_automatic+0xc8>)
 80002c6:	f001 ff04 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2180      	movs	r1, #128	@ 0x80
 80002ce:	4828      	ldr	r0, [pc, #160]	@ (8000370 <init_automatic+0xcc>)
 80002d0:	f001 feff 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2140      	movs	r1, #64	@ 0x40
 80002d8:	4826      	ldr	r0, [pc, #152]	@ (8000374 <init_automatic+0xd0>)
 80002da:	f001 fefa 	bl	80020d2 <HAL_GPIO_WritePin>
	status1 = DO;
 80002de:	4b26      	ldr	r3, [pc, #152]	@ (8000378 <init_automatic+0xd4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
	status2 = XANH;
 80002e4:	4b25      	ldr	r3, [pc, #148]	@ (800037c <init_automatic+0xd8>)
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002f0:	481e      	ldr	r0, [pc, #120]	@ (800036c <init_automatic+0xc8>)
 80002f2:	f001 feee 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002fc:	481b      	ldr	r0, [pc, #108]	@ (800036c <init_automatic+0xc8>)
 80002fe:	f001 fee8 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	481a      	ldr	r0, [pc, #104]	@ (8000370 <init_automatic+0xcc>)
 8000308:	f001 fee3 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2140      	movs	r1, #64	@ 0x40
 8000310:	4818      	ldr	r0, [pc, #96]	@ (8000374 <init_automatic+0xd0>)
 8000312:	f001 fede 	bl	80020d2 <HAL_GPIO_WritePin>
	counter1 = 0;
 8000316:	4b1a      	ldr	r3, [pc, #104]	@ (8000380 <init_automatic+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	counter2 = 0;
 800031c:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <init_automatic+0xe0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]

	lcd_clear_display();
 8000322:	f000 fdfa 	bl	8000f1a <lcd_clear_display>
	lcd_goto_XY (1,0);
 8000326:	2100      	movs	r1, #0
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fe00 	bl	8000f2e <lcd_goto_XY>
	lcd_send_string(" TIME DO  :");
 800032e:	4816      	ldr	r0, [pc, #88]	@ (8000388 <init_automatic+0xe4>)
 8000330:	f000 fdde 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (1,12);
 8000334:	210c      	movs	r1, #12
 8000336:	2001      	movs	r0, #1
 8000338:	f000 fdf9 	bl	8000f2e <lcd_goto_XY>
    lcd_send_number(timeDO);
 800033c:	4b13      	ldr	r3, [pc, #76]	@ (800038c <init_automatic+0xe8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fe17 	bl	8000f74 <lcd_send_number>

	lcd_goto_XY (2,0);
 8000346:	2100      	movs	r1, #0
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fdf0 	bl	8000f2e <lcd_goto_XY>
	lcd_send_string("TIME XANH :");
 800034e:	4810      	ldr	r0, [pc, #64]	@ (8000390 <init_automatic+0xec>)
 8000350:	f000 fdce 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (2,12);
 8000354:	210c      	movs	r1, #12
 8000356:	2002      	movs	r0, #2
 8000358:	f000 fde9 	bl	8000f2e <lcd_goto_XY>
    lcd_send_number(timeXANH);
 800035c:	4b0d      	ldr	r3, [pc, #52]	@ (8000394 <init_automatic+0xf0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fe07 	bl	8000f74 <lcd_send_number>

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800
 8000370:	40011000 	.word	0x40011000
 8000374:	40010c00 	.word	0x40010c00
 8000378:	20000254 	.word	0x20000254
 800037c:	2000003c 	.word	0x2000003c
 8000380:	2000024c 	.word	0x2000024c
 8000384:	20000250 	.word	0x20000250
 8000388:	080043c0 	.word	0x080043c0
 800038c:	20000040 	.word	0x20000040
 8000390:	080043cc 	.word	0x080043cc
 8000394:	20000044 	.word	0x20000044

08000398 <fsm_automatic>:


void fsm_automatic()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if(TRANGTHAI == 0 )
 800039c:	4b95      	ldr	r3, [pc, #596]	@ (80005f4 <fsm_automatic+0x25c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 817c 	bne.w	800069e <fsm_automatic+0x306>
		{
	    if (timer_flag[0] == 1) {
 80003a6:	4b94      	ldr	r3, [pc, #592]	@ (80005f8 <fsm_automatic+0x260>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	f040 8177 	bne.w	800069e <fsm_automatic+0x306>
	        switch(status1) {
 80003b0:	4b92      	ldr	r3, [pc, #584]	@ (80005fc <fsm_automatic+0x264>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d024      	beq.n	8000402 <fsm_automatic+0x6a>
 80003b8:	2b02      	cmp	r3, #2
 80003ba:	dc61      	bgt.n	8000480 <fsm_automatic+0xe8>
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d002      	beq.n	80003c6 <fsm_automatic+0x2e>
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d03c      	beq.n	800043e <fsm_automatic+0xa6>
	                    status1 = DO;
	                    counter1 = 0;
	                }
	                break;
	            default:
	                break;
 80003c4:	e05c      	b.n	8000480 <fsm_automatic+0xe8>
	                counter1++;
 80003c6:	4b8e      	ldr	r3, [pc, #568]	@ (8000600 <fsm_automatic+0x268>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	3301      	adds	r3, #1
 80003cc:	4a8c      	ldr	r2, [pc, #560]	@ (8000600 <fsm_automatic+0x268>)
 80003ce:	6013      	str	r3, [r2, #0]
	                if (counter1 >= timeDO) {
 80003d0:	4b8b      	ldr	r3, [pc, #556]	@ (8000600 <fsm_automatic+0x268>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b8b      	ldr	r3, [pc, #556]	@ (8000604 <fsm_automatic+0x26c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	db53      	blt.n	8000484 <fsm_automatic+0xec>
	                	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003e2:	4889      	ldr	r0, [pc, #548]	@ (8000608 <fsm_automatic+0x270>)
 80003e4:	f001 fe75 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ee:	4886      	ldr	r0, [pc, #536]	@ (8000608 <fsm_automatic+0x270>)
 80003f0:	f001 fe6f 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status1 = XANH;
 80003f4:	4b81      	ldr	r3, [pc, #516]	@ (80005fc <fsm_automatic+0x264>)
 80003f6:	2202      	movs	r2, #2
 80003f8:	601a      	str	r2, [r3, #0]
	                    counter1 = 0;
 80003fa:	4b81      	ldr	r3, [pc, #516]	@ (8000600 <fsm_automatic+0x268>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
	                break;
 8000400:	e040      	b.n	8000484 <fsm_automatic+0xec>
	                counter1++;
 8000402:	4b7f      	ldr	r3, [pc, #508]	@ (8000600 <fsm_automatic+0x268>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	4a7d      	ldr	r2, [pc, #500]	@ (8000600 <fsm_automatic+0x268>)
 800040a:	6013      	str	r3, [r2, #0]
	                if (counter1 >= timeXANH) {
 800040c:	4b7c      	ldr	r3, [pc, #496]	@ (8000600 <fsm_automatic+0x268>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b7e      	ldr	r3, [pc, #504]	@ (800060c <fsm_automatic+0x274>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	429a      	cmp	r2, r3
 8000416:	db37      	blt.n	8000488 <fsm_automatic+0xf0>
	                	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800041e:	487a      	ldr	r0, [pc, #488]	@ (8000608 <fsm_automatic+0x270>)
 8000420:	f001 fe57 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800042a:	4877      	ldr	r0, [pc, #476]	@ (8000608 <fsm_automatic+0x270>)
 800042c:	f001 fe51 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status1 = VANG;
 8000430:	4b72      	ldr	r3, [pc, #456]	@ (80005fc <fsm_automatic+0x264>)
 8000432:	2201      	movs	r2, #1
 8000434:	601a      	str	r2, [r3, #0]
	                    counter1 = 0;
 8000436:	4b72      	ldr	r3, [pc, #456]	@ (8000600 <fsm_automatic+0x268>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
	                break;
 800043c:	e024      	b.n	8000488 <fsm_automatic+0xf0>
	                counter1++;
 800043e:	4b70      	ldr	r3, [pc, #448]	@ (8000600 <fsm_automatic+0x268>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	4a6e      	ldr	r2, [pc, #440]	@ (8000600 <fsm_automatic+0x268>)
 8000446:	6013      	str	r3, [r2, #0]
	                if (counter1 >= (timeDO - timeXANH)) {
 8000448:	4b6e      	ldr	r3, [pc, #440]	@ (8000604 <fsm_automatic+0x26c>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b6f      	ldr	r3, [pc, #444]	@ (800060c <fsm_automatic+0x274>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	1ad2      	subs	r2, r2, r3
 8000452:	4b6b      	ldr	r3, [pc, #428]	@ (8000600 <fsm_automatic+0x268>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	dc18      	bgt.n	800048c <fsm_automatic+0xf4>
	                	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000460:	4869      	ldr	r0, [pc, #420]	@ (8000608 <fsm_automatic+0x270>)
 8000462:	f001 fe36 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800046c:	4866      	ldr	r0, [pc, #408]	@ (8000608 <fsm_automatic+0x270>)
 800046e:	f001 fe30 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status1 = DO;
 8000472:	4b62      	ldr	r3, [pc, #392]	@ (80005fc <fsm_automatic+0x264>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
	                    counter1 = 0;
 8000478:	4b61      	ldr	r3, [pc, #388]	@ (8000600 <fsm_automatic+0x268>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
	                break;
 800047e:	e005      	b.n	800048c <fsm_automatic+0xf4>
	                break;
 8000480:	bf00      	nop
 8000482:	e004      	b.n	800048e <fsm_automatic+0xf6>
	                break;
 8000484:	bf00      	nop
 8000486:	e002      	b.n	800048e <fsm_automatic+0xf6>
	                break;
 8000488:	bf00      	nop
 800048a:	e000      	b.n	800048e <fsm_automatic+0xf6>
	                break;
 800048c:	bf00      	nop
	        }

	        switch(status2) {
 800048e:	4b60      	ldr	r3, [pc, #384]	@ (8000610 <fsm_automatic+0x278>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d022      	beq.n	80004dc <fsm_automatic+0x144>
 8000496:	2b02      	cmp	r3, #2
 8000498:	dc5b      	bgt.n	8000552 <fsm_automatic+0x1ba>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <fsm_automatic+0x10c>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d038      	beq.n	8000514 <fsm_automatic+0x17c>
	                    status2 = DO;
	                    counter2 = 0;
	                }
	                break;
	            default:
	                break;
 80004a2:	e056      	b.n	8000552 <fsm_automatic+0x1ba>
	                counter2++;
 80004a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000614 <fsm_automatic+0x27c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	4a5a      	ldr	r2, [pc, #360]	@ (8000614 <fsm_automatic+0x27c>)
 80004ac:	6013      	str	r3, [r2, #0]
	                if (counter2 >= timeDO) {
 80004ae:	4b59      	ldr	r3, [pc, #356]	@ (8000614 <fsm_automatic+0x27c>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b54      	ldr	r3, [pc, #336]	@ (8000604 <fsm_automatic+0x26c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	db4d      	blt.n	8000556 <fsm_automatic+0x1be>
	                	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2180      	movs	r1, #128	@ 0x80
 80004be:	4856      	ldr	r0, [pc, #344]	@ (8000618 <fsm_automatic+0x280>)
 80004c0:	f001 fe07 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2140      	movs	r1, #64	@ 0x40
 80004c8:	4854      	ldr	r0, [pc, #336]	@ (800061c <fsm_automatic+0x284>)
 80004ca:	f001 fe02 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status2 = XANH;
 80004ce:	4b50      	ldr	r3, [pc, #320]	@ (8000610 <fsm_automatic+0x278>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]
	                    counter2 = 0;
 80004d4:	4b4f      	ldr	r3, [pc, #316]	@ (8000614 <fsm_automatic+0x27c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
	                break;
 80004da:	e03c      	b.n	8000556 <fsm_automatic+0x1be>
	                counter2++;
 80004dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000614 <fsm_automatic+0x27c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000614 <fsm_automatic+0x27c>)
 80004e4:	6013      	str	r3, [r2, #0]
	                if (counter2 >= timeXANH) {
 80004e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000614 <fsm_automatic+0x27c>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b48      	ldr	r3, [pc, #288]	@ (800060c <fsm_automatic+0x274>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	db33      	blt.n	800055a <fsm_automatic+0x1c2>
	                	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	4848      	ldr	r0, [pc, #288]	@ (8000618 <fsm_automatic+0x280>)
 80004f8:	f001 fdeb 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2140      	movs	r1, #64	@ 0x40
 8000500:	4846      	ldr	r0, [pc, #280]	@ (800061c <fsm_automatic+0x284>)
 8000502:	f001 fde6 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status2 = VANG;
 8000506:	4b42      	ldr	r3, [pc, #264]	@ (8000610 <fsm_automatic+0x278>)
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
	                    counter2 = 0;
 800050c:	4b41      	ldr	r3, [pc, #260]	@ (8000614 <fsm_automatic+0x27c>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
	                break;
 8000512:	e022      	b.n	800055a <fsm_automatic+0x1c2>
	                counter2++;
 8000514:	4b3f      	ldr	r3, [pc, #252]	@ (8000614 <fsm_automatic+0x27c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a3e      	ldr	r2, [pc, #248]	@ (8000614 <fsm_automatic+0x27c>)
 800051c:	6013      	str	r3, [r2, #0]
	                if (counter2 >= (timeDO - timeXANH)) {
 800051e:	4b39      	ldr	r3, [pc, #228]	@ (8000604 <fsm_automatic+0x26c>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b3a      	ldr	r3, [pc, #232]	@ (800060c <fsm_automatic+0x274>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1ad2      	subs	r2, r2, r3
 8000528:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <fsm_automatic+0x27c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	dc16      	bgt.n	800055e <fsm_automatic+0x1c6>
	                	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	4838      	ldr	r0, [pc, #224]	@ (8000618 <fsm_automatic+0x280>)
 8000536:	f001 fdcc 	bl	80020d2 <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2140      	movs	r1, #64	@ 0x40
 800053e:	4837      	ldr	r0, [pc, #220]	@ (800061c <fsm_automatic+0x284>)
 8000540:	f001 fdc7 	bl	80020d2 <HAL_GPIO_WritePin>
	                    status2 = DO;
 8000544:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <fsm_automatic+0x278>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
	                    counter2 = 0;
 800054a:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <fsm_automatic+0x27c>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	                break;
 8000550:	e005      	b.n	800055e <fsm_automatic+0x1c6>
	                break;
 8000552:	bf00      	nop
 8000554:	e004      	b.n	8000560 <fsm_automatic+0x1c8>
	                break;
 8000556:	bf00      	nop
 8000558:	e002      	b.n	8000560 <fsm_automatic+0x1c8>
	                break;
 800055a:	bf00      	nop
 800055c:	e000      	b.n	8000560 <fsm_automatic+0x1c8>
	                break;
 800055e:	bf00      	nop
	        }

	        countdown1 = (status1 == DO) ? (timeDO - counter1) :
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <fsm_automatic+0x264>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d105      	bne.n	8000574 <fsm_automatic+0x1dc>
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <fsm_automatic+0x26c>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <fsm_automatic+0x268>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	e011      	b.n	8000598 <fsm_automatic+0x200>
	                     (status1 == VANG) ? (timeDO - timeXANH - counter1) :
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <fsm_automatic+0x264>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d108      	bne.n	800058e <fsm_automatic+0x1f6>
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <fsm_automatic+0x26c>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <fsm_automatic+0x274>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1ad2      	subs	r2, r2, r3
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <fsm_automatic+0x268>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	e004      	b.n	8000598 <fsm_automatic+0x200>
	                     (timeXANH - counter1);
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <fsm_automatic+0x274>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <fsm_automatic+0x268>)
 8000594:	681b      	ldr	r3, [r3, #0]
	                     (status1 == VANG) ? (timeDO - timeXANH - counter1) :
 8000596:	1ad3      	subs	r3, r2, r3
	        countdown1 = (status1 == DO) ? (timeDO - counter1) :
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <fsm_automatic+0x288>)
 800059a:	6013      	str	r3, [r2, #0]

	        countdown2 = (status2 == DO) ? (timeDO - counter2) :
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <fsm_automatic+0x278>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d105      	bne.n	80005b0 <fsm_automatic+0x218>
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <fsm_automatic+0x26c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <fsm_automatic+0x27c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	e011      	b.n	80005d4 <fsm_automatic+0x23c>
	                     (status2 == VANG) ? (timeDO - timeXANH - counter2) :
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <fsm_automatic+0x278>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d108      	bne.n	80005ca <fsm_automatic+0x232>
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <fsm_automatic+0x26c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <fsm_automatic+0x274>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <fsm_automatic+0x27c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	e004      	b.n	80005d4 <fsm_automatic+0x23c>
	                     (timeXANH - counter2);
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <fsm_automatic+0x274>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <fsm_automatic+0x27c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
	                     (status2 == VANG) ? (timeDO - timeXANH - counter2) :
 80005d2:	1ad3      	subs	r3, r2, r3
	        countdown2 = (status2 == DO) ? (timeDO - counter2) :
 80005d4:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <fsm_automatic+0x28c>)
 80005d6:	6013      	str	r3, [r2, #0]


	        lcd_clear_display();
 80005d8:	f000 fc9f 	bl	8000f1a <lcd_clear_display>
	        lcd_goto_XY (1,0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fca5 	bl	8000f2e <lcd_goto_XY>
	        if(status1 == DO) lcd_send_string(" TIME DO  :");
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <fsm_automatic+0x264>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d11f      	bne.n	800062c <fsm_automatic+0x294>
 80005ec:	480e      	ldr	r0, [pc, #56]	@ (8000628 <fsm_automatic+0x290>)
 80005ee:	f000 fc7f 	bl	8000ef0 <lcd_send_string>
 80005f2:	e026      	b.n	8000642 <fsm_automatic+0x2aa>
 80005f4:	200000d4 	.word	0x200000d4
 80005f8:	20000220 	.word	0x20000220
 80005fc:	20000254 	.word	0x20000254
 8000600:	2000024c 	.word	0x2000024c
 8000604:	20000040 	.word	0x20000040
 8000608:	40010800 	.word	0x40010800
 800060c:	20000044 	.word	0x20000044
 8000610:	2000003c 	.word	0x2000003c
 8000614:	20000250 	.word	0x20000250
 8000618:	40011000 	.word	0x40011000
 800061c:	40010c00 	.word	0x40010c00
 8000620:	20000258 	.word	0x20000258
 8000624:	2000025c 	.word	0x2000025c
 8000628:	080043c0 	.word	0x080043c0
	        else if(status1 == XANH) lcd_send_string("TIME XANH :");
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <fsm_automatic+0x30c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d103      	bne.n	800063c <fsm_automatic+0x2a4>
 8000634:	481c      	ldr	r0, [pc, #112]	@ (80006a8 <fsm_automatic+0x310>)
 8000636:	f000 fc5b 	bl	8000ef0 <lcd_send_string>
 800063a:	e002      	b.n	8000642 <fsm_automatic+0x2aa>
	        else lcd_send_string("TIME VANG :");
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <fsm_automatic+0x314>)
 800063e:	f000 fc57 	bl	8000ef0 <lcd_send_string>
	        lcd_goto_XY (1,12);
 8000642:	210c      	movs	r1, #12
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fc72 	bl	8000f2e <lcd_goto_XY>
	        lcd_send_number(countdown1);
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <fsm_automatic+0x318>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fc90 	bl	8000f74 <lcd_send_number>


	        lcd_goto_XY (2,0);
 8000654:	2100      	movs	r1, #0
 8000656:	2002      	movs	r0, #2
 8000658:	f000 fc69 	bl	8000f2e <lcd_goto_XY>
	        if(status2 == DO) lcd_send_string(" TIME DO  :");
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <fsm_automatic+0x31c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <fsm_automatic+0x2d4>
 8000664:	4814      	ldr	r0, [pc, #80]	@ (80006b8 <fsm_automatic+0x320>)
 8000666:	f000 fc43 	bl	8000ef0 <lcd_send_string>
 800066a:	e00a      	b.n	8000682 <fsm_automatic+0x2ea>
	        else if(status2 == XANH) lcd_send_string("TIME XANH :");
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <fsm_automatic+0x31c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d103      	bne.n	800067c <fsm_automatic+0x2e4>
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <fsm_automatic+0x310>)
 8000676:	f000 fc3b 	bl	8000ef0 <lcd_send_string>
 800067a:	e002      	b.n	8000682 <fsm_automatic+0x2ea>
	        else lcd_send_string("TIME VANG :");
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <fsm_automatic+0x314>)
 800067e:	f000 fc37 	bl	8000ef0 <lcd_send_string>
	        lcd_goto_XY (2,12);
 8000682:	210c      	movs	r1, #12
 8000684:	2002      	movs	r0, #2
 8000686:	f000 fc52 	bl	8000f2e <lcd_goto_XY>
	        lcd_send_number(countdown2);
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <fsm_automatic+0x324>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fc70 	bl	8000f74 <lcd_send_number>
	        // Reset timer for traffic light logic
	        setTimer(0, 1000);
 8000694:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000698:	2000      	movs	r0, #0
 800069a:	f001 f859 	bl	8001750 <setTimer>
	    }
		}
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000254 	.word	0x20000254
 80006a8:	080043cc 	.word	0x080043cc
 80006ac:	080043d8 	.word	0x080043d8
 80006b0:	20000258 	.word	0x20000258
 80006b4:	2000003c 	.word	0x2000003c
 80006b8:	080043c0 	.word	0x080043c0
 80006bc:	2000025c 	.word	0x2000025c

080006c0 <init_manual>:

// Khai báo biến lưu trạng thái đèn tín hiệu và nút bấm
uint8_t red_led_state1, red_led_state2;

void init_manual()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <init_manual+0x74>)
 80006cc:	f001 fd01 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d6:	4817      	ldr	r0, [pc, #92]	@ (8000734 <init_manual+0x74>)
 80006d8:	f001 fcfb 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	@ 0x80
 80006e0:	4815      	ldr	r0, [pc, #84]	@ (8000738 <init_manual+0x78>)
 80006e2:	f001 fcf6 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	4814      	ldr	r0, [pc, #80]	@ (800073c <init_manual+0x7c>)
 80006ec:	f001 fcf1 	bl	80020d2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	480f      	ldr	r0, [pc, #60]	@ (8000734 <init_manual+0x74>)
 80006f8:	f001 fceb 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <init_manual+0x74>)
 8000704:	f001 fce5 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	480a      	ldr	r0, [pc, #40]	@ (8000738 <init_manual+0x78>)
 800070e:	f001 fce0 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	@ 0x40
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <init_manual+0x7c>)
 8000718:	f001 fcdb 	bl	80020d2 <HAL_GPIO_WritePin>

	lcd_clear_display();
 800071c:	f000 fbfd 	bl	8000f1a <lcd_clear_display>
    lcd_goto_XY (1,2);
 8000720:	2102      	movs	r1, #2
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fc03 	bl	8000f2e <lcd_goto_XY>
    lcd_send_string("CHE DO MANUAL");
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <init_manual+0x80>)
 800072a:	f000 fbe1 	bl	8000ef0 <lcd_send_string>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40010800 	.word	0x40010800
 8000738:	40011000 	.word	0x40011000
 800073c:	40010c00 	.word	0x40010c00
 8000740:	080043e4 	.word	0x080043e4

08000744 <fsm_manual>:

void fsm_manual()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	if(TRANGTHAI == 1)
 8000748:	4b55      	ldr	r3, [pc, #340]	@ (80008a0 <fsm_manual+0x15c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	f040 80a4 	bne.w	800089a <fsm_manual+0x156>
	{
		if(HAL_GPIO_ReadPin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin) && HAL_GPIO_ReadPin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin)) red_led_state1 = 1;
 8000752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000756:	4853      	ldr	r0, [pc, #332]	@ (80008a4 <fsm_manual+0x160>)
 8000758:	f001 fca4 	bl	80020a4 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00b      	beq.n	800077a <fsm_manual+0x36>
 8000762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000766:	484f      	ldr	r0, [pc, #316]	@ (80008a4 <fsm_manual+0x160>)
 8000768:	f001 fc9c 	bl	80020a4 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <fsm_manual+0x36>
 8000772:	4b4d      	ldr	r3, [pc, #308]	@ (80008a8 <fsm_manual+0x164>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e002      	b.n	8000780 <fsm_manual+0x3c>
		else red_led_state1 = 0;
 800077a:	4b4b      	ldr	r3, [pc, #300]	@ (80008a8 <fsm_manual+0x164>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin) && HAL_GPIO_ReadPin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin)) red_led_state2 = 1;
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	484a      	ldr	r0, [pc, #296]	@ (80008ac <fsm_manual+0x168>)
 8000784:	f001 fc8e 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <fsm_manual+0x60>
 800078e:	2140      	movs	r1, #64	@ 0x40
 8000790:	4847      	ldr	r0, [pc, #284]	@ (80008b0 <fsm_manual+0x16c>)
 8000792:	f001 fc87 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d003      	beq.n	80007a4 <fsm_manual+0x60>
 800079c:	4b45      	ldr	r3, [pc, #276]	@ (80008b4 <fsm_manual+0x170>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e002      	b.n	80007aa <fsm_manual+0x66>
		else red_led_state2 = 0;
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <fsm_manual+0x170>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
    // Đọc trạng thái của các đèn tín hiệu
    // Xử lý nút nhấn 2
    if (button2_flag == 1) // Nếu nút nhấn 2 được nhấn và chưa được xử lý
 80007aa:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <fsm_manual+0x174>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d139      	bne.n	8000826 <fsm_manual+0xe2>
    {
        if (red_led_state2 == 1) // Nếu RED_LED2 đang sáng
 80007b2:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <fsm_manual+0x170>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d132      	bne.n	8000820 <fsm_manual+0xdc>
        {
            // Nếu GREEN_LED1 đang sáng, chuyển sang YELLOW
            if (HAL_GPIO_ReadPin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin) == GPIO_PIN_SET)
 80007ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007be:	4839      	ldr	r0, [pc, #228]	@ (80008a4 <fsm_manual+0x160>)
 80007c0:	f001 fc70 	bl	80020a4 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d10c      	bne.n	80007e4 <fsm_manual+0xa0>
            {
            	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d0:	4834      	ldr	r0, [pc, #208]	@ (80008a4 <fsm_manual+0x160>)
 80007d2:	f001 fc7e 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	4831      	ldr	r0, [pc, #196]	@ (80008a4 <fsm_manual+0x160>)
 80007de:	f001 fc78 	bl	80020d2 <HAL_GPIO_WritePin>
 80007e2:	e01d      	b.n	8000820 <fsm_manual+0xdc>
            }
            // Nếu YELLOW_LED1 đang sáng, chuyển sang RED
            else if (HAL_GPIO_ReadPin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin) == GPIO_PIN_SET)
 80007e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e8:	482e      	ldr	r0, [pc, #184]	@ (80008a4 <fsm_manual+0x160>)
 80007ea:	f001 fc5b 	bl	80020a4 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d115      	bne.n	8000820 <fsm_manual+0xdc>
            {
            	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007fa:	482a      	ldr	r0, [pc, #168]	@ (80008a4 <fsm_manual+0x160>)
 80007fc:	f001 fc69 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000806:	4827      	ldr	r0, [pc, #156]	@ (80008a4 <fsm_manual+0x160>)
 8000808:	f001 fc63 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	4826      	ldr	r0, [pc, #152]	@ (80008ac <fsm_manual+0x168>)
 8000812:	f001 fc5e 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	4825      	ldr	r0, [pc, #148]	@ (80008b0 <fsm_manual+0x16c>)
 800081c:	f001 fc59 	bl	80020d2 <HAL_GPIO_WritePin>
            }
        }
        button2_flag = 0;
 8000820:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <fsm_manual+0x174>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
    }

    // Xử lý nút nhấn 3
    if (button3_flag == 1) // Nếu nút nhấn 3 được nhấn và chưa được xử lý
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <fsm_manual+0x178>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d135      	bne.n	800089a <fsm_manual+0x156>
    {
        if (red_led_state1 == 1) // Nếu RED_LED1 đang sáng
 800082e:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <fsm_manual+0x164>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d12e      	bne.n	8000894 <fsm_manual+0x150>
        {
            // Nếu GREEN_LED2 đang sáng, chuyển sang YELLOW
            if (HAL_GPIO_ReadPin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin) == GPIO_PIN_SET)
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	481c      	ldr	r0, [pc, #112]	@ (80008ac <fsm_manual+0x168>)
 800083a:	f001 fc33 	bl	80020a4 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10a      	bne.n	800085a <fsm_manual+0x116>
            {
            	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	4818      	ldr	r0, [pc, #96]	@ (80008ac <fsm_manual+0x168>)
 800084a:	f001 fc42 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <fsm_manual+0x16c>)
 8000854:	f001 fc3d 	bl	80020d2 <HAL_GPIO_WritePin>
 8000858:	e01c      	b.n	8000894 <fsm_manual+0x150>
            }
            // Nếu YELLOW_LED1 đang sáng, chuyển sang RED
            else if (HAL_GPIO_ReadPin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin) == GPIO_PIN_SET)
 800085a:	2140      	movs	r1, #64	@ 0x40
 800085c:	4814      	ldr	r0, [pc, #80]	@ (80008b0 <fsm_manual+0x16c>)
 800085e:	f001 fc21 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d115      	bne.n	8000894 <fsm_manual+0x150>
            {
            	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480f      	ldr	r0, [pc, #60]	@ (80008ac <fsm_manual+0x168>)
 800086e:	f001 fc30 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <fsm_manual+0x16c>)
 8000878:	f001 fc2b 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000882:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <fsm_manual+0x160>)
 8000884:	f001 fc25 	bl	80020d2 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <fsm_manual+0x160>)
 8000890:	f001 fc1f 	bl	80020d2 <HAL_GPIO_WritePin>
            }
        }
        button3_flag = 0;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <fsm_manual+0x178>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
        }
    }

	}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000d4 	.word	0x200000d4
 80008a4:	40010800 	.word	0x40010800
 80008a8:	200000cc 	.word	0x200000cc
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	200000cd 	.word	0x200000cd
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	200000c8 	.word	0x200000c8

080008c0 <init_setting>:
#include"fsm_setting.h"
	uint8_t check_denxanh = 0;
	uint8_t check_denvang = 0;
void init_setting()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ca:	4823      	ldr	r0, [pc, #140]	@ (8000958 <init_setting+0x98>)
 80008cc:	f001 fc01 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d6:	4820      	ldr	r0, [pc, #128]	@ (8000958 <init_setting+0x98>)
 80008d8:	f001 fbfb 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	481e      	ldr	r0, [pc, #120]	@ (800095c <init_setting+0x9c>)
 80008e2:	f001 fbf6 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	481d      	ldr	r0, [pc, #116]	@ (8000960 <init_setting+0xa0>)
 80008ec:	f001 fbf1 	bl	80020d2 <HAL_GPIO_WritePin>
	currentState = DO;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <init_setting+0xa4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4816      	ldr	r0, [pc, #88]	@ (8000958 <init_setting+0x98>)
 80008fe:	f001 fbe8 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000908:	4813      	ldr	r0, [pc, #76]	@ (8000958 <init_setting+0x98>)
 800090a:	f001 fbe2 	bl	80020d2 <HAL_GPIO_WritePin>
	setTimer (2 ,250 );
 800090e:	21fa      	movs	r1, #250	@ 0xfa
 8000910:	2002      	movs	r0, #2
 8000912:	f000 ff1d 	bl	8001750 <setTimer>
	check_denxanh = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <init_setting+0xa8>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	check_denvang = 0;
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <init_setting+0xac>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]

	lcd_clear_display();
 8000922:	f000 fafa 	bl	8000f1a <lcd_clear_display>
    lcd_goto_XY (1,1);
 8000926:	2101      	movs	r1, #1
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fb00 	bl	8000f2e <lcd_goto_XY>
    lcd_send_string("CHE DO SETTING");
 800092e:	4810      	ldr	r0, [pc, #64]	@ (8000970 <init_setting+0xb0>)
 8000930:	f000 fade 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (2,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2002      	movs	r0, #2
 8000938:	f000 faf9 	bl	8000f2e <lcd_goto_XY>
    lcd_send_string(" TIME DO  :");
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <init_setting+0xb4>)
 800093e:	f000 fad7 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (2,12);
 8000942:	210c      	movs	r1, #12
 8000944:	2002      	movs	r0, #2
 8000946:	f000 faf2 	bl	8000f2e <lcd_goto_XY>
    lcd_send_number(timeDO);
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <init_setting+0xb8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb10 	bl	8000f74 <lcd_send_number>

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010800 	.word	0x40010800
 800095c:	40011000 	.word	0x40011000
 8000960:	40010c00 	.word	0x40010c00
 8000964:	200000d0 	.word	0x200000d0
 8000968:	200000ce 	.word	0x200000ce
 800096c:	200000cf 	.word	0x200000cf
 8000970:	080043f4 	.word	0x080043f4
 8000974:	08004404 	.word	0x08004404
 8000978:	20000040 	.word	0x20000040

0800097c <fsm_setting>:
void fsm_setting()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

    if((TRANGTHAI == 2 || TRANGTHAI == 3 || TRANGTHAI == 4))
 8000980:	4b7a      	ldr	r3, [pc, #488]	@ (8000b6c <fsm_setting+0x1f0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d008      	beq.n	800099a <fsm_setting+0x1e>
 8000988:	4b78      	ldr	r3, [pc, #480]	@ (8000b6c <fsm_setting+0x1f0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d004      	beq.n	800099a <fsm_setting+0x1e>
 8000990:	4b76      	ldr	r3, [pc, #472]	@ (8000b6c <fsm_setting+0x1f0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b04      	cmp	r3, #4
 8000996:	f040 80e6 	bne.w	8000b66 <fsm_setting+0x1ea>
    {
    if(button2_flag || button3_flag)
 800099a:	4b75      	ldr	r3, [pc, #468]	@ (8000b70 <fsm_setting+0x1f4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <fsm_setting+0x2e>
 80009a2:	4b74      	ldr	r3, [pc, #464]	@ (8000b74 <fsm_setting+0x1f8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d07b      	beq.n	8000aa2 <fsm_setting+0x126>
    {
    if (button2_flag == 1) { // btnB Pressed
 80009aa:	4b71      	ldr	r3, [pc, #452]	@ (8000b70 <fsm_setting+0x1f4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d11c      	bne.n	80009ec <fsm_setting+0x70>
    	                   // chinh tang time do
    			if(currentState == DO)
 80009b2:	4b71      	ldr	r3, [pc, #452]	@ (8000b78 <fsm_setting+0x1fc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d105      	bne.n	80009c6 <fsm_setting+0x4a>
    			{

    			           timeDO++;
 80009ba:	4b70      	ldr	r3, [pc, #448]	@ (8000b7c <fsm_setting+0x200>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	4a6e      	ldr	r2, [pc, #440]	@ (8000b7c <fsm_setting+0x200>)
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e00e      	b.n	80009e4 <fsm_setting+0x68>
    			}
    			           // chinh tang time xanh
    			else if (currentState == XANH)
 80009c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000b78 <fsm_setting+0x1fc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d105      	bne.n	80009da <fsm_setting+0x5e>
    			{
    				      timeXANH++;
 80009ce:	4b6c      	ldr	r3, [pc, #432]	@ (8000b80 <fsm_setting+0x204>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a6a      	ldr	r2, [pc, #424]	@ (8000b80 <fsm_setting+0x204>)
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e004      	b.n	80009e4 <fsm_setting+0x68>

    			}
    			else
    			{
    				      timeVANG++;
 80009da:	4b6a      	ldr	r3, [pc, #424]	@ (8000b84 <fsm_setting+0x208>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a68      	ldr	r2, [pc, #416]	@ (8000b84 <fsm_setting+0x208>)
 80009e2:	6013      	str	r3, [r2, #0]
    			}
    			button2_flag = 0;
 80009e4:	4b62      	ldr	r3, [pc, #392]	@ (8000b70 <fsm_setting+0x1f4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e01f      	b.n	8000a2c <fsm_setting+0xb0>
    		      }
    else if (button3_flag == 1) { // btnB Pressed
 80009ec:	4b61      	ldr	r3, [pc, #388]	@ (8000b74 <fsm_setting+0x1f8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d11b      	bne.n	8000a2c <fsm_setting+0xb0>
    	                   // chinh giam time do
    			if(currentState == DO)
 80009f4:	4b60      	ldr	r3, [pc, #384]	@ (8000b78 <fsm_setting+0x1fc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <fsm_setting+0x8c>
    			{

    			           timeDO--;
 80009fc:	4b5f      	ldr	r3, [pc, #380]	@ (8000b7c <fsm_setting+0x200>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a5e      	ldr	r2, [pc, #376]	@ (8000b7c <fsm_setting+0x200>)
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e00e      	b.n	8000a26 <fsm_setting+0xaa>
    			}
    			           // chinh tang time xanh
    			else if (currentState == XANH)
 8000a08:	4b5b      	ldr	r3, [pc, #364]	@ (8000b78 <fsm_setting+0x1fc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d105      	bne.n	8000a1c <fsm_setting+0xa0>
    			{
    				      timeXANH--;
 8000a10:	4b5b      	ldr	r3, [pc, #364]	@ (8000b80 <fsm_setting+0x204>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a5a      	ldr	r2, [pc, #360]	@ (8000b80 <fsm_setting+0x204>)
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e004      	b.n	8000a26 <fsm_setting+0xaa>

    			}
    			else
    			{
    				      timeVANG--;
 8000a1c:	4b59      	ldr	r3, [pc, #356]	@ (8000b84 <fsm_setting+0x208>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a58      	ldr	r2, [pc, #352]	@ (8000b84 <fsm_setting+0x208>)
 8000a24:	6013      	str	r3, [r2, #0]
    			}

    			button3_flag = 0;
 8000a26:	4b53      	ldr	r3, [pc, #332]	@ (8000b74 <fsm_setting+0x1f8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
    		  	  }

    countdown2 = (currentState == DO) ? timeDO :
 8000a2c:	4b52      	ldr	r3, [pc, #328]	@ (8000b78 <fsm_setting+0x1fc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d009      	beq.n	8000a48 <fsm_setting+0xcc>
                 (currentState == VANG) ? timeVANG :
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <fsm_setting+0x1fc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d102      	bne.n	8000a42 <fsm_setting+0xc6>
 8000a3c:	4b51      	ldr	r3, [pc, #324]	@ (8000b84 <fsm_setting+0x208>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	e004      	b.n	8000a4c <fsm_setting+0xd0>
 8000a42:	4b4f      	ldr	r3, [pc, #316]	@ (8000b80 <fsm_setting+0x204>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	e001      	b.n	8000a4c <fsm_setting+0xd0>
    countdown2 = (currentState == DO) ? timeDO :
 8000a48:	4b4c      	ldr	r3, [pc, #304]	@ (8000b7c <fsm_setting+0x200>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b88 <fsm_setting+0x20c>)
 8000a4e:	6013      	str	r3, [r2, #0]
                		 timeXANH;

	lcd_clear_display();
 8000a50:	f000 fa63 	bl	8000f1a <lcd_clear_display>
    lcd_goto_XY (1,1);
 8000a54:	2101      	movs	r1, #1
 8000a56:	2001      	movs	r0, #1
 8000a58:	f000 fa69 	bl	8000f2e <lcd_goto_XY>
    lcd_send_string("CHE DO SETTING");
 8000a5c:	484b      	ldr	r0, [pc, #300]	@ (8000b8c <fsm_setting+0x210>)
 8000a5e:	f000 fa47 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (2,0);
 8000a62:	2100      	movs	r1, #0
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fa62 	bl	8000f2e <lcd_goto_XY>
    if(currentState == DO) lcd_send_string(" TIME DO  :");
 8000a6a:	4b43      	ldr	r3, [pc, #268]	@ (8000b78 <fsm_setting+0x1fc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <fsm_setting+0xfe>
 8000a72:	4847      	ldr	r0, [pc, #284]	@ (8000b90 <fsm_setting+0x214>)
 8000a74:	f000 fa3c 	bl	8000ef0 <lcd_send_string>
 8000a78:	e00a      	b.n	8000a90 <fsm_setting+0x114>
    else if(currentState == XANH) lcd_send_string("TIME XANH :");
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <fsm_setting+0x1fc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d103      	bne.n	8000a8a <fsm_setting+0x10e>
 8000a82:	4844      	ldr	r0, [pc, #272]	@ (8000b94 <fsm_setting+0x218>)
 8000a84:	f000 fa34 	bl	8000ef0 <lcd_send_string>
 8000a88:	e002      	b.n	8000a90 <fsm_setting+0x114>
    else lcd_send_string("TIME VANG :");
 8000a8a:	4843      	ldr	r0, [pc, #268]	@ (8000b98 <fsm_setting+0x21c>)
 8000a8c:	f000 fa30 	bl	8000ef0 <lcd_send_string>
    lcd_goto_XY (2,12);
 8000a90:	210c      	movs	r1, #12
 8000a92:	2002      	movs	r0, #2
 8000a94:	f000 fa4b 	bl	8000f2e <lcd_goto_XY>
    lcd_send_number(countdown2);
 8000a98:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <fsm_setting+0x20c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa69 	bl	8000f74 <lcd_send_number>

    }

	// nhap nhay den
	if(timer_flag[2] == 1)
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <fsm_setting+0x220>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d15d      	bne.n	8000b66 <fsm_setting+0x1ea>
	{
	if(currentState == DO)
 8000aaa:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <fsm_setting+0x1fc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10a      	bne.n	8000ac8 <fsm_setting+0x14c>
	{
      HAL_GPIO_TogglePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin);
 8000ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab6:	483a      	ldr	r0, [pc, #232]	@ (8000ba0 <fsm_setting+0x224>)
 8000ab8:	f001 fb23 	bl	8002102 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin);
 8000abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac0:	4837      	ldr	r0, [pc, #220]	@ (8000ba0 <fsm_setting+0x224>)
 8000ac2:	f001 fb1e 	bl	8002102 <HAL_GPIO_TogglePin>
 8000ac6:	e04a      	b.n	8000b5e <fsm_setting+0x1e2>
	}
	else if (currentState == XANH)
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <fsm_setting+0x1fc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d123      	bne.n	8000b18 <fsm_setting+0x19c>
	{
          if(check_denxanh == 0)
 8000ad0:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <fsm_setting+0x228>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10f      	bne.n	8000af8 <fsm_setting+0x17c>
          {
        		HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ade:	4830      	ldr	r0, [pc, #192]	@ (8000ba0 <fsm_setting+0x224>)
 8000ae0:	f001 faf7 	bl	80020d2 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aea:	482d      	ldr	r0, [pc, #180]	@ (8000ba0 <fsm_setting+0x224>)
 8000aec:	f001 faf1 	bl	80020d2 <HAL_GPIO_WritePin>
        		check_denxanh = 1;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <fsm_setting+0x228>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e032      	b.n	8000b5e <fsm_setting+0x1e2>
          }
          else
          {
      		HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afe:	4828      	ldr	r0, [pc, #160]	@ (8000ba0 <fsm_setting+0x224>)
 8000b00:	f001 fae7 	bl	80020d2 <HAL_GPIO_WritePin>
      		HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b0a:	4825      	ldr	r0, [pc, #148]	@ (8000ba0 <fsm_setting+0x224>)
 8000b0c:	f001 fae1 	bl	80020d2 <HAL_GPIO_WritePin>
      		check_denxanh = 0;
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <fsm_setting+0x228>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e022      	b.n	8000b5e <fsm_setting+0x1e2>
          }
	}
	else
	{
        if(check_denvang == 0)
 8000b18:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <fsm_setting+0x22c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <fsm_setting+0x1c4>
        {
      		HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <fsm_setting+0x224>)
 8000b28:	f001 fad3 	bl	80020d2 <HAL_GPIO_WritePin>
      		HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b32:	481b      	ldr	r0, [pc, #108]	@ (8000ba0 <fsm_setting+0x224>)
 8000b34:	f001 facd 	bl	80020d2 <HAL_GPIO_WritePin>
      		check_denvang = 1;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <fsm_setting+0x22c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e00e      	b.n	8000b5e <fsm_setting+0x1e2>
        }
        else
        {
    		HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b46:	4816      	ldr	r0, [pc, #88]	@ (8000ba0 <fsm_setting+0x224>)
 8000b48:	f001 fac3 	bl	80020d2 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4813      	ldr	r0, [pc, #76]	@ (8000ba0 <fsm_setting+0x224>)
 8000b54:	f001 fabd 	bl	80020d2 <HAL_GPIO_WritePin>
    		check_denvang = 0;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <fsm_setting+0x22c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
        }
	}
	setTimer (2 ,250 );
 8000b5e:	21fa      	movs	r1, #250	@ 0xfa
 8000b60:	2002      	movs	r0, #2
 8000b62:	f000 fdf5 	bl	8001750 <setTimer>
	}

    }
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000d4 	.word	0x200000d4
 8000b70:	200000c4 	.word	0x200000c4
 8000b74:	200000c8 	.word	0x200000c8
 8000b78:	200000d0 	.word	0x200000d0
 8000b7c:	20000040 	.word	0x20000040
 8000b80:	20000044 	.word	0x20000044
 8000b84:	20000048 	.word	0x20000048
 8000b88:	2000025c 	.word	0x2000025c
 8000b8c:	080043f4 	.word	0x080043f4
 8000b90:	08004404 	.word	0x08004404
 8000b94:	08004410 	.word	0x08004410
 8000b98:	0800441c 	.word	0x0800441c
 8000b9c:	20000220 	.word	0x20000220
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	200000ce 	.word	0x200000ce
 8000ba8:	200000cf 	.word	0x200000cf

08000bac <setuptrangthai>:
#include "global.h"
int currentState;
int TRANGTHAI = 0;
int check = 1;
void setuptrangthai()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	 switch(TRANGTHAI) {
 8000bb0:	4b79      	ldr	r3, [pc, #484]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	f200 80c7 	bhi.w	8000d48 <setuptrangthai+0x19c>
 8000bba:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc0 <setuptrangthai+0x14>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bdd 	.word	0x08000bdd
 8000bc4:	08000bf3 	.word	0x08000bf3
 8000bc8:	08000c09 	.word	0x08000c09
 8000bcc:	08000c1f 	.word	0x08000c1f
 8000bd0:	08000c69 	.word	0x08000c69
 8000bd4:	08000cb1 	.word	0x08000cb1
 8000bd8:	08000cdb 	.word	0x08000cdb
	          case AUTOMATIC:
	              if(check == 1)
 8000bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 80b3 	bne.w	8000d4c <setuptrangthai+0x1a0>
	             {
	            	  init_automatic();
 8000be6:	f7ff fb5d 	bl	80002a4 <init_automatic>
	            	  check = 0;
 8000bea:	4b6c      	ldr	r3, [pc, #432]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
	             }
	             // fsm_automatic();
	              break;
 8000bf0:	e0ac      	b.n	8000d4c <setuptrangthai+0x1a0>
	          case MANUAL:
	              if(check == 1)
 8000bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	f040 80aa 	bne.w	8000d50 <setuptrangthai+0x1a4>
	              {
	            	  init_manual();
 8000bfc:	f7ff fd60 	bl	80006c0 <init_manual>
	            	  check = 0;
 8000c00:	4b66      	ldr	r3, [pc, #408]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
	              }
	             // fsm_manual();
	              break;
 8000c06:	e0a3      	b.n	8000d50 <setuptrangthai+0x1a4>
	          case SET_DO:
	              if(check == 1)
 8000c08:	4b64      	ldr	r3, [pc, #400]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	f040 80a1 	bne.w	8000d54 <setuptrangthai+0x1a8>
	              {
	            	  init_setting();
 8000c12:	f7ff fe55 	bl	80008c0 <init_setting>
	            	  check = 0;
 8000c16:	4b61      	ldr	r3, [pc, #388]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	              }
	             // fsm_setting();
	              break;
 8000c1c:	e09a      	b.n	8000d54 <setuptrangthai+0x1a8>
	          case SET_XANH:
	              if(check == 1)
 8000c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f040 8098 	bne.w	8000d58 <setuptrangthai+0x1ac>
	             {
	        	  currentState = XANH;
 8000c28:	4b5d      	ldr	r3, [pc, #372]	@ (8000da0 <setuptrangthai+0x1f4>)
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	601a      	str	r2, [r3, #0]
	        		lcd_clear_display();
 8000c2e:	f000 f974 	bl	8000f1a <lcd_clear_display>
	        	    lcd_goto_XY (1,1);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f97a 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_string("CHE DO SETTING");
 8000c3a:	485a      	ldr	r0, [pc, #360]	@ (8000da4 <setuptrangthai+0x1f8>)
 8000c3c:	f000 f958 	bl	8000ef0 <lcd_send_string>
	        	    lcd_goto_XY (2,0);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2002      	movs	r0, #2
 8000c44:	f000 f973 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_string("TIME XANH :");
 8000c48:	4857      	ldr	r0, [pc, #348]	@ (8000da8 <setuptrangthai+0x1fc>)
 8000c4a:	f000 f951 	bl	8000ef0 <lcd_send_string>
	        	    lcd_goto_XY (2,12);
 8000c4e:	210c      	movs	r1, #12
 8000c50:	2002      	movs	r0, #2
 8000c52:	f000 f96c 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_number(timeXANH);
 8000c56:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <setuptrangthai+0x200>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f98a 	bl	8000f74 <lcd_send_number>
	            	  check = 0;
 8000c60:	4b4e      	ldr	r3, [pc, #312]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
	             }
	        	 // fsm_setting();
	              break;
 8000c66:	e077      	b.n	8000d58 <setuptrangthai+0x1ac>
	          case SET_VANG:
	              if(check == 1)
 8000c68:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d175      	bne.n	8000d5c <setuptrangthai+0x1b0>
	             {
	        	  currentState = VANG;
 8000c70:	4b4b      	ldr	r3, [pc, #300]	@ (8000da0 <setuptrangthai+0x1f4>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
	        		lcd_clear_display();
 8000c76:	f000 f950 	bl	8000f1a <lcd_clear_display>
	        	    lcd_goto_XY (1,1);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 f956 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_string("CHE DO SETTING");
 8000c82:	4848      	ldr	r0, [pc, #288]	@ (8000da4 <setuptrangthai+0x1f8>)
 8000c84:	f000 f934 	bl	8000ef0 <lcd_send_string>
	        	    lcd_goto_XY (2,0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f000 f94f 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_string("TIME VANG :");
 8000c90:	4847      	ldr	r0, [pc, #284]	@ (8000db0 <setuptrangthai+0x204>)
 8000c92:	f000 f92d 	bl	8000ef0 <lcd_send_string>
	        	    lcd_goto_XY (2,12);
 8000c96:	210c      	movs	r1, #12
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f948 	bl	8000f2e <lcd_goto_XY>
	        	    lcd_send_number(timeVANG);
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <setuptrangthai+0x208>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f966 	bl	8000f74 <lcd_send_number>
	            	  check = 0;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
	             }
	        	 // fsm_setting();
	              break;
 8000cae:	e055      	b.n	8000d5c <setuptrangthai+0x1b0>
	          case CHECK_MODE:
	              if(check == 1)
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d153      	bne.n	8000d60 <setuptrangthai+0x1b4>
	              {
	                if(timeDO == timeXANH + timeVANG)TRANGTHAI = 0;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dac <setuptrangthai+0x200>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000db4 <setuptrangthai+0x208>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	441a      	add	r2, r3
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <setuptrangthai+0x20c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d103      	bne.n	8000cd2 <setuptrangthai+0x126>
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	                else TRANGTHAI = 6;
	              }
	              break;
 8000cd0:	e046      	b.n	8000d60 <setuptrangthai+0x1b4>
	                else TRANGTHAI = 6;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000cd4:	2206      	movs	r2, #6
 8000cd6:	601a      	str	r2, [r3, #0]
	              break;
 8000cd8:	e042      	b.n	8000d60 <setuptrangthai+0x1b4>
	          case ERROR_STATE:
	              if(check == 1)
 8000cda:	4b30      	ldr	r3, [pc, #192]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d140      	bne.n	8000d64 <setuptrangthai+0x1b8>
	              {
	            	  	 // hien thi tren man hinh lcd

	            		HAL_GPIO_WritePin(BIT0_LED1_GPIO_Port, BIT0_LED1_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce8:	4834      	ldr	r0, [pc, #208]	@ (8000dbc <setuptrangthai+0x210>)
 8000cea:	f001 f9f2 	bl	80020d2 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(BIT1_LED1_GPIO_Port, BIT1_LED1_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf4:	4831      	ldr	r0, [pc, #196]	@ (8000dbc <setuptrangthai+0x210>)
 8000cf6:	f001 f9ec 	bl	80020d2 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	4830      	ldr	r0, [pc, #192]	@ (8000dc0 <setuptrangthai+0x214>)
 8000d00:	f001 f9e7 	bl	80020d2 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2140      	movs	r1, #64	@ 0x40
 8000d08:	482e      	ldr	r0, [pc, #184]	@ (8000dc4 <setuptrangthai+0x218>)
 8000d0a:	f001 f9e2 	bl	80020d2 <HAL_GPIO_WritePin>

	            		lcd_clear_display();
 8000d0e:	f000 f904 	bl	8000f1a <lcd_clear_display>
	            	    lcd_goto_XY (1,2);
 8000d12:	2102      	movs	r1, #2
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f90a 	bl	8000f2e <lcd_goto_XY>
	            	    lcd_send_string("THIEI LAP LOI");
 8000d1a:	482b      	ldr	r0, [pc, #172]	@ (8000dc8 <setuptrangthai+0x21c>)
 8000d1c:	f000 f8e8 	bl	8000ef0 <lcd_send_string>
	            	    lcd_goto_XY (2,2);
 8000d20:	2102      	movs	r1, #2
 8000d22:	2002      	movs	r0, #2
 8000d24:	f000 f903 	bl	8000f2e <lcd_goto_XY>
	            	    lcd_send_string("RESET TIME!");
 8000d28:	4828      	ldr	r0, [pc, #160]	@ (8000dcc <setuptrangthai+0x220>)
 8000d2a:	f000 f8e1 	bl	8000ef0 <lcd_send_string>

	               		timeDO = 5;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <setuptrangthai+0x20c>)
 8000d30:	2205      	movs	r2, #5
 8000d32:	601a      	str	r2, [r3, #0]
	               		timeXANH = 3;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <setuptrangthai+0x200>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	601a      	str	r2, [r3, #0]
	               		timeVANG = 2;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <setuptrangthai+0x208>)
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	601a      	str	r2, [r3, #0]
	               		check = 0;
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
	              }
	              break;
 8000d46:	e00d      	b.n	8000d64 <setuptrangthai+0x1b8>
	          default:
	              break;
 8000d48:	bf00      	nop
 8000d4a:	e00c      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d4c:	bf00      	nop
 8000d4e:	e00a      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d50:	bf00      	nop
 8000d52:	e008      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d54:	bf00      	nop
 8000d56:	e006      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d58:	bf00      	nop
 8000d5a:	e004      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <setuptrangthai+0x1ba>
	              break;
 8000d64:	bf00      	nop
	      }
     if(button1_flag == 1)
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <setuptrangthai+0x224>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d112      	bne.n	8000d94 <setuptrangthai+0x1e8>
     {

         check = 1;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <setuptrangthai+0x1f0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

    	 if(TRANGTHAI < 5)TRANGTHAI++;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	dc05      	bgt.n	8000d88 <setuptrangthai+0x1dc>
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e002      	b.n	8000d8e <setuptrangthai+0x1e2>
    	 else TRANGTHAI = 0;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <setuptrangthai+0x1ec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
    	 button1_flag = 0;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <setuptrangthai+0x224>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
     }
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000d4 	.word	0x200000d4
 8000d9c:	20000030 	.word	0x20000030
 8000da0:	200000d0 	.word	0x200000d0
 8000da4:	08004428 	.word	0x08004428
 8000da8:	08004438 	.word	0x08004438
 8000dac:	20000044 	.word	0x20000044
 8000db0:	08004444 	.word	0x08004444
 8000db4:	20000048 	.word	0x20000048
 8000db8:	20000040 	.word	0x20000040
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	08004450 	.word	0x08004450
 8000dcc:	08004460 	.word	0x08004460
 8000dd0:	200000c0 	.word	0x200000c0

08000dd4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f023 030f 	bic.w	r3, r3, #15
 8000de4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	f043 030c 	orr.w	r3, r3, #12
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	f043 030c 	orr.w	r3, r3, #12
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e14:	f107 0208 	add.w	r2, r7, #8
 8000e18:	2364      	movs	r3, #100	@ 0x64
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	2142      	movs	r1, #66	@ 0x42
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <lcd_send_cmd+0x5c>)
 8000e22:	f001 facb 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000d8 	.word	0x200000d8

08000e34 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f043 030d 	orr.w	r3, r3, #13
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0309 	orr.w	r3, r3, #9
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	f043 030d 	orr.w	r3, r3, #13
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f043 0309 	orr.w	r3, r3, #9
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	2364      	movs	r3, #100	@ 0x64
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	2142      	movs	r1, #66	@ 0x42
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <lcd_send_data+0x5c>)
 8000e82:	f001 fa9b 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000d8 	.word	0x200000d8

08000e94 <lcd_init>:

void lcd_init (void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000e98:	2033      	movs	r0, #51	@ 0x33
 8000e9a:	f7ff ff9b 	bl	8000dd4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000e9e:	2032      	movs	r0, #50	@ 0x32
 8000ea0:	f7ff ff98 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ea4:	2032      	movs	r0, #50	@ 0x32
 8000ea6:	f000 fe47 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000eaa:	2028      	movs	r0, #40	@ 0x28
 8000eac:	f7ff ff92 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000eb0:	2032      	movs	r0, #50	@ 0x32
 8000eb2:	f000 fe41 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff ff8c 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ebc:	2032      	movs	r0, #50	@ 0x32
 8000ebe:	f000 fe3b 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff ff86 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	@ 0x32
 8000eca:	f000 fe35 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000ece:	200c      	movs	r0, #12
 8000ed0:	f7ff ff80 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ed4:	2032      	movs	r0, #50	@ 0x32
 8000ed6:	f000 fe2f 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff ff7a 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ee0:	2032      	movs	r0, #50	@ 0x32
 8000ee2:	f000 fe29 	bl	8001b38 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000ee6:	2080      	movs	r0, #128	@ 0x80
 8000ee8:	f7ff ff74 	bl	8000dd4 <lcd_send_cmd>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ef8:	e006      	b.n	8000f08 <lcd_send_string+0x18>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff96 	bl	8000e34 <lcd_send_data>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f4      	bne.n	8000efa <lcd_send_string+0xa>
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff58 	bl	8000dd4 <lcd_send_cmd>
	HAL_Delay(2);
 8000f24:	2002      	movs	r0, #2
 8000f26:	f000 fe07 	bl	8001b38 <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	337f      	adds	r3, #127	@ 0x7f
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e008      	b.n	8000f62 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3340      	adds	r3, #64	@ 0x40
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff35 	bl	8000dd4 <lcd_send_cmd>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <lcd_send_number>:

void lcd_send_number (int number)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	char buffer[4];
	sprintf(buffer, "%d", number);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4906      	ldr	r1, [pc, #24]	@ (8000f9c <lcd_send_number+0x28>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fd5f 	bl	8003a48 <siprintf>
	lcd_send_string(buffer);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffae 	bl	8000ef0 <lcd_send_string>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800446c 	.word	0x0800446c

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fd66 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f830 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 f8e4 	bl	8001178 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb0:	f000 f868 	bl	8001084 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fb4:	f000 f894 	bl	80010e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 8000fb8:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <main+0x58>)
 8000fba:	f002 f9a3 	bl	8003304 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000fbe:	f7ff ff69 	bl	8000e94 <lcd_init>
  SCH_Init();
 8000fc2:	f000 fa5b 	bl	800147c <SCH_Init>
  SCH_Add_Task(fsm_automatic,0,10);
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	2100      	movs	r1, #0
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <main+0x5c>)
 8000fcc:	f000 fa70 	bl	80014b0 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting,0,10);
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <main+0x60>)
 8000fd6:	f000 fa6b 	bl	80014b0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual,0,10);
 8000fda:	220a      	movs	r2, #10
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <main+0x64>)
 8000fe0:	f000 fa66 	bl	80014b0 <SCH_Add_Task>
  SCH_Add_Task(setuptrangthai,0,10);
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <main+0x68>)
 8000fea:	f000 fa61 	bl	80014b0 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      SCH_Dispatch_Tasks();
 8000fee:	f000 fb69 	bl	80016c4 <SCH_Dispatch_Tasks>
      __WFI();  // Ch�? đến khi có ngắt
 8000ff2:	bf30      	wfi
      SCH_Dispatch_Tasks();
 8000ff4:	bf00      	nop
 8000ff6:	e7fa      	b.n	8000fee <main+0x4e>
 8000ff8:	2000012c 	.word	0x2000012c
 8000ffc:	08000399 	.word	0x08000399
 8001000:	0800097d 	.word	0x0800097d
 8001004:	08000745 	.word	0x08000745
 8001008:	08000bad 	.word	0x08000bad

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b090      	sub	sp, #64	@ 0x40
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2228      	movs	r2, #40	@ 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fd34 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fd12 	bl	8002a6c <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800104e:	f000 f923 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 ff80 	bl	8002f70 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001076:	f000 f90f 	bl	8001298 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3740      	adds	r7, #64	@ 0x40
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f001 f837 	bl	8002134 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f8e4 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000d8 	.word	0x200000d8
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_TIM2_Init+0x94>)
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001102:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <MX_TIM2_Init+0x94>)
 8001106:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800110a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_TIM2_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <MX_TIM2_Init+0x94>)
 8001114:	2209      	movs	r2, #9
 8001116:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_TIM2_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_TIM2_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001124:	4813      	ldr	r0, [pc, #76]	@ (8001174 <MX_TIM2_Init+0x94>)
 8001126:	f002 f89d 	bl	8003264 <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001130:	f000 f8b2 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <MX_TIM2_Init+0x94>)
 8001142:	f002 fa21 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 f8a4 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_TIM2_Init+0x94>)
 800115e:	f002 fc03 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 f896 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000012c 	.word	0x2000012c

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b37      	ldr	r3, [pc, #220]	@ (800126c <MX_GPIO_Init+0xf4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a36      	ldr	r2, [pc, #216]	@ (800126c <MX_GPIO_Init+0xf4>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_GPIO_Init+0xf4>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a4:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a30      	ldr	r2, [pc, #192]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0xf4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIT0_LED2_GPIO_Port, BIT0_LED2_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	4825      	ldr	r0, [pc, #148]	@ (8001270 <MX_GPIO_Init+0xf8>)
 80011da:	f000 ff7a 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIT0_LED1_Pin|BIT1_LED1_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80011e4:	4823      	ldr	r0, [pc, #140]	@ (8001274 <MX_GPIO_Init+0xfc>)
 80011e6:	f000 ff74 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIT1_LED2_GPIO_Port, BIT1_LED2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	@ 0x40
 80011ee:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_GPIO_Init+0x100>)
 80011f0:	f000 ff6f 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80011f4:	2313      	movs	r3, #19
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	481b      	ldr	r0, [pc, #108]	@ (8001274 <MX_GPIO_Init+0xfc>)
 8001208:	f000 fdc8 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BIT0_LED2_Pin */
  GPIO_InitStruct.Pin = BIT0_LED2_Pin;
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BIT0_LED2_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4813      	ldr	r0, [pc, #76]	@ (8001270 <MX_GPIO_Init+0xf8>)
 8001224:	f000 fdba 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIT0_LED1_Pin BIT1_LED1_Pin */
  GPIO_InitStruct.Pin = BIT0_LED1_Pin|BIT1_LED1_Pin;
 8001228:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_GPIO_Init+0xfc>)
 8001242:	f000 fdab 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BIT1_LED2_Pin */
  GPIO_InitStruct.Pin = BIT1_LED2_Pin;
 8001246:	2340      	movs	r3, #64	@ 0x40
 8001248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2302      	movs	r3, #2
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BIT1_LED2_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_GPIO_Init+0x100>)
 800125e:	f000 fd9d 	bl	8001d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40011000 	.word	0x40011000
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00

0800127c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	        // Xử lý khi Timer2 hết hạn
	        timer_run();
 8001284:	f000 fa88 	bl	8001798 <timer_run>
	        SCH_Update();
 8001288:	f000 f9ae 	bl	80015e8 <SCH_Update>
	        getKeyInput();
 800128c:	f7fe ff5e 	bl	800014c <getKeyInput>
	        // Check button input with debounces
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <SCH_Insert_Into_Queue>:
uint8_t ReadyQueue[SCH_MAX_TASKS]; // Lưu chỉ số các tác vụ cần chạy
uint8_t ReadyQueueSize = 0;        // Kích thước hàng đợi
uint8_t TasksSize = 0;

// Hàm thêm tác vụ vào hàng đợi tại vị trí thích hợp
void SCH_Insert_Into_Queue(uint8_t taskIndex) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]

    // Điều chỉnh delay tương đối khi thêm vào hàng đợi
    for (i = 0; i < ReadyQueueSize; i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e05f      	b.n	8001378 <SCH_Insert_Into_Queue+0xd4>
        if (SCH_tasks_G[taskIndex].Delay < SCH_tasks_G[ReadyQueue[i]].Delay) {
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	4942      	ldr	r1, [pc, #264]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3304      	adds	r3, #4
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	493e      	ldr	r1, [pc, #248]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	4618      	mov	r0, r3
 80012d2:	493c      	ldr	r1, [pc, #240]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 80012d4:	4603      	mov	r3, r0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4403      	add	r3, r0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d224      	bcs.n	8001330 <SCH_Insert_Into_Queue+0x8c>
            SCH_tasks_G[ReadyQueue[i]].Delay -= SCH_tasks_G[taskIndex].Delay;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4a37      	ldr	r2, [pc, #220]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a35      	ldr	r2, [pc, #212]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 80012f0:	460b      	mov	r3, r1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	440b      	add	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3304      	adds	r3, #4
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	4830      	ldr	r0, [pc, #192]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4403      	add	r3, r0
 800130c:	3304      	adds	r3, #4
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	482d      	ldr	r0, [pc, #180]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 8001314:	5c82      	ldrb	r2, [r0, r2]
 8001316:	4610      	mov	r0, r2
 8001318:	1acb      	subs	r3, r1, r3
 800131a:	b299      	uxth	r1, r3
 800131c:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4403      	add	r3, r0
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	460a      	mov	r2, r1
 800132c:	801a      	strh	r2, [r3, #0]
            break;
 800132e:	e028      	b.n	8001382 <SCH_Insert_Into_Queue+0xde>
        }
        SCH_tasks_G[taskIndex].Delay -= SCH_tasks_G[ReadyQueue[i]].Delay;
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	4924      	ldr	r1, [pc, #144]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	3304      	adds	r3, #4
 8001340:	8819      	ldrh	r1, [r3, #0]
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	4618      	mov	r0, r3
 800134a:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 800134c:	4603      	mov	r3, r0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4403      	add	r3, r0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	1acb      	subs	r3, r1, r3
 800135e:	b298      	uxth	r0, r3
 8001360:	4918      	ldr	r1, [pc, #96]	@ (80013c4 <SCH_Insert_Into_Queue+0x120>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	4602      	mov	r2, r0
 8001370:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ReadyQueueSize; i++) {
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <SCH_Insert_Into_Queue+0x128>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	429a      	cmp	r2, r3
 8001380:	d39a      	bcc.n	80012b8 <SCH_Insert_Into_Queue+0x14>
    }

    // Dịch chuyển các phần tử còn lại trong hàng đợi
    for (uint8_t j = ReadyQueueSize; j > i; j--) {
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <SCH_Insert_Into_Queue+0x128>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	73bb      	strb	r3, [r7, #14]
 8001388:	e009      	b.n	800139e <SCH_Insert_Into_Queue+0xfa>
        ReadyQueue[j] = ReadyQueue[j - 1];
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	490d      	ldr	r1, [pc, #52]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 8001392:	5c89      	ldrb	r1, [r1, r2]
 8001394:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 8001396:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = ReadyQueueSize; j > i; j--) {
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	3b01      	subs	r3, #1
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	7bba      	ldrb	r2, [r7, #14]
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d8f1      	bhi.n	800138a <SCH_Insert_Into_Queue+0xe6>
    }

    // Thêm tác vụ vào vị trí phù hợp
    ReadyQueue[i] = taskIndex;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4907      	ldr	r1, [pc, #28]	@ (80013c8 <SCH_Insert_Into_Queue+0x124>)
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	54ca      	strb	r2, [r1, r3]
    ReadyQueueSize++;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <SCH_Insert_Into_Queue+0x128>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <SCH_Insert_Into_Queue+0x128>)
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000174 	.word	0x20000174
 80013c8:	200001ec 	.word	0x200001ec
 80013cc:	200001f6 	.word	0x200001f6

080013d0 <SCH_Remove_From_Queue>:

// Hàm loại bỏ tác vụ khỏi đầu hàng đợi
uint8_t SCH_Remove_From_Queue() {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
    if (ReadyQueueSize == 0) {
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <SCH_Remove_From_Queue+0xa0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <SCH_Remove_From_Queue+0x12>
        return SCH_MAX_TASKS; // Hàng đợi trống
 80013de:	230a      	movs	r3, #10
 80013e0:	e041      	b.n	8001466 <SCH_Remove_From_Queue+0x96>
    }

    uint8_t taskIndex = ReadyQueue[0];
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <SCH_Remove_From_Queue+0xa4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	71bb      	strb	r3, [r7, #6]

    // Điều chỉnh delay cho tác vụ tiếp theo trong hàng đợi
    if (ReadyQueueSize > 1) {
 80013e8:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <SCH_Remove_From_Queue+0xa0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d921      	bls.n	8001434 <SCH_Remove_From_Queue+0x64>
        SCH_tasks_G[ReadyQueue[1]].Delay += SCH_tasks_G[taskIndex].Delay;
 80013f0:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <SCH_Remove_From_Queue+0xa4>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4a20      	ldr	r2, [pc, #128]	@ (8001478 <SCH_Remove_From_Queue+0xa8>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	440b      	add	r3, r1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3304      	adds	r3, #4
 8001404:	8819      	ldrh	r1, [r3, #0]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	481b      	ldr	r0, [pc, #108]	@ (8001478 <SCH_Remove_From_Queue+0xa8>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4403      	add	r3, r0
 8001414:	3304      	adds	r3, #4
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <SCH_Remove_From_Queue+0xa4>)
 800141a:	7852      	ldrb	r2, [r2, #1]
 800141c:	4610      	mov	r0, r2
 800141e:	440b      	add	r3, r1
 8001420:	b299      	uxth	r1, r3
 8001422:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <SCH_Remove_From_Queue+0xa8>)
 8001424:	4603      	mov	r3, r0
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4403      	add	r3, r0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	460a      	mov	r2, r1
 8001432:	801a      	strh	r2, [r3, #0]
    }

    // Dịch chuyển các phần tử còn lại về phía trước
    for (uint8_t i = 1; i < ReadyQueueSize; i++) {
 8001434:	2301      	movs	r3, #1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	e009      	b.n	800144e <SCH_Remove_From_Queue+0x7e>
        ReadyQueue[i - 1] = ReadyQueue[i];
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	3b01      	subs	r3, #1
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <SCH_Remove_From_Queue+0xa4>)
 8001442:	5c89      	ldrb	r1, [r1, r2]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <SCH_Remove_From_Queue+0xa4>)
 8001446:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i < ReadyQueueSize; i++) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	3301      	adds	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <SCH_Remove_From_Queue+0xa0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3f0      	bcc.n	800143a <SCH_Remove_From_Queue+0x6a>
    }

    ReadyQueueSize--;
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SCH_Remove_From_Queue+0xa0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <SCH_Remove_From_Queue+0xa0>)
 8001462:	701a      	strb	r2, [r3, #0]
    return taskIndex;
 8001464:	79bb      	ldrb	r3, [r7, #6]
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200001f6 	.word	0x200001f6
 8001474:	200001ec 	.word	0x200001ec
 8001478:	20000174 	.word	0x20000174

0800147c <SCH_Init>:

// Hàm khởi tạo
void SCH_Init(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
    ReadyQueueSize = 0;
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <SCH_Init+0x30>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	e006      	b.n	800149c <SCH_Init+0x20>
        SCH_Delete_Task(i);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f873 	bl	800157c <SCH_Delete_Task>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3301      	adds	r3, #1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b09      	cmp	r3, #9
 80014a0:	d9f5      	bls.n	800148e <SCH_Init+0x12>
    }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001f6 	.word	0x200001f6

080014b0 <SCH_Add_Task>:

// Thêm tác vụ
uint8_t SCH_Add_Task(void (*pFunction)(), uint16_t DELAY, uint16_t PERIOD) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	803b      	strh	r3, [r7, #0]
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e04b      	b.n	800155e <SCH_Add_Task+0xae>
        if (!SCH_tasks_G[i].pTask) {  // Tìm vị trí trống
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	4929      	ldr	r1, [pc, #164]	@ (8001570 <SCH_Add_Task+0xc0>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13e      	bne.n	8001558 <SCH_Add_Task+0xa8>
            SCH_tasks_G[i].pTask = pFunction;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	4924      	ldr	r1, [pc, #144]	@ (8001570 <SCH_Add_Task+0xc0>)
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]
            SCH_tasks_G[i].Delay = DELAY / 10;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	4920      	ldr	r1, [pc, #128]	@ (8001574 <SCH_Add_Task+0xc4>)
 80014f2:	fba1 1303 	umull	r1, r3, r1, r3
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	b298      	uxth	r0, r3
 80014fa:	491d      	ldr	r1, [pc, #116]	@ (8001570 <SCH_Add_Task+0xc0>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3304      	adds	r3, #4
 8001508:	4602      	mov	r2, r0
 800150a:	801a      	strh	r2, [r3, #0]
            SCH_tasks_G[i].Period = PERIOD / 10;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	4918      	ldr	r1, [pc, #96]	@ (8001574 <SCH_Add_Task+0xc4>)
 8001512:	fba1 1303 	umull	r1, r3, r1, r3
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	b298      	uxth	r0, r3
 800151a:	4915      	ldr	r1, [pc, #84]	@ (8001570 <SCH_Add_Task+0xc0>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3306      	adds	r3, #6
 8001528:	4602      	mov	r2, r0
 800152a:	801a      	strh	r2, [r3, #0]
            SCH_tasks_G[i].RunMe = 0;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	4910      	ldr	r1, [pc, #64]	@ (8001570 <SCH_Add_Task+0xc0>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3308      	adds	r3, #8
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

            // Thêm vào hàng đợi
            SCH_Insert_Into_Queue(i);
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff feae 	bl	80012a4 <SCH_Insert_Into_Queue>
            TasksSize++;
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <SCH_Add_Task+0xc8>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <SCH_Add_Task+0xc8>)
 8001552:	701a      	strb	r2, [r3, #0]
            return i;  // Trả về chỉ số tác vụ
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	e006      	b.n	8001566 <SCH_Add_Task+0xb6>
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b09      	cmp	r3, #9
 8001562:	d9b0      	bls.n	80014c6 <SCH_Add_Task+0x16>
        }
    }
    return SCH_MAX_TASKS;  // Hết chỗ trống
 8001564:	230a      	movs	r3, #10
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000174 	.word	0x20000174
 8001574:	cccccccd 	.word	0xcccccccd
 8001578:	200001f7 	.word	0x200001f7

0800157c <SCH_Delete_Task>:

// Xóa tác vụ
void SCH_Delete_Task(uint8_t index) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
    if (index < SCH_MAX_TASKS) {
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b09      	cmp	r3, #9
 800158a:	d826      	bhi.n	80015da <SCH_Delete_Task+0x5e>
        SCH_tasks_G[index].pTask = NULL;
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	4915      	ldr	r1, [pc, #84]	@ (80015e4 <SCH_Delete_Task+0x68>)
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[index].Delay = 0;
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	4910      	ldr	r1, [pc, #64]	@ (80015e4 <SCH_Delete_Task+0x68>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3304      	adds	r3, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
        SCH_tasks_G[index].Period = 0;
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	490b      	ldr	r1, [pc, #44]	@ (80015e4 <SCH_Delete_Task+0x68>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3306      	adds	r3, #6
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
        SCH_tasks_G[index].RunMe = 0;
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <SCH_Delete_Task+0x68>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3308      	adds	r3, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000174 	.word	0x20000174

080015e8 <SCH_Update>:

// Cập nhật các tác vụ
void SCH_Update(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
    if (ReadyQueueSize == 0) return;
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <SCH_Update+0xd0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d05b      	beq.n	80016ae <SCH_Update+0xc6>

    // Giảm thời gian chờ của tác vụ đầu tiên
    uint8_t taskIndex = ReadyQueue[0];
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <SCH_Update+0xd4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
    if (SCH_tasks_G[taskIndex].Delay > 0) {
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	4930      	ldr	r1, [pc, #192]	@ (80016c0 <SCH_Update+0xd8>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3304      	adds	r3, #4
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d013      	beq.n	800163a <SCH_Update+0x52>
        SCH_tasks_G[taskIndex].Delay--;
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	492a      	ldr	r1, [pc, #168]	@ (80016c0 <SCH_Update+0xd8>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3304      	adds	r3, #4
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	b298      	uxth	r0, r3
 8001628:	4925      	ldr	r1, [pc, #148]	@ (80016c0 <SCH_Update+0xd8>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3304      	adds	r3, #4
 8001636:	4602      	mov	r2, r0
 8001638:	801a      	strh	r2, [r3, #0]
    }

    // Nếu Delay về 0, xử lý tác vụ
    if (SCH_tasks_G[taskIndex].Delay == 0) {
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	4920      	ldr	r1, [pc, #128]	@ (80016c0 <SCH_Update+0xd8>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3304      	adds	r3, #4
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d12f      	bne.n	80016b0 <SCH_Update+0xc8>
        SCH_tasks_G[taskIndex].RunMe = 1;
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	491b      	ldr	r1, [pc, #108]	@ (80016c0 <SCH_Update+0xd8>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3308      	adds	r3, #8
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]

        // Loại bỏ khỏi đầu hàng đợi
        SCH_Remove_From_Queue();
 8001664:	f7ff feb4 	bl	80013d0 <SCH_Remove_From_Queue>

        // Nếu là tác vụ định kỳ, tính toán lại Delay và thêm vào hàng đợi
        if (SCH_tasks_G[taskIndex].Period > 0) {
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	4915      	ldr	r1, [pc, #84]	@ (80016c0 <SCH_Update+0xd8>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3306      	adds	r3, #6
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d018      	beq.n	80016b0 <SCH_Update+0xc8>
            SCH_tasks_G[taskIndex].Delay = SCH_tasks_G[taskIndex].Period;
 800167e:	79f9      	ldrb	r1, [r7, #7]
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <SCH_Update+0xd8>)
 8001684:	460b      	mov	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4403      	add	r3, r0
 800168e:	3306      	adds	r3, #6
 8001690:	8818      	ldrh	r0, [r3, #0]
 8001692:	490b      	ldr	r1, [pc, #44]	@ (80016c0 <SCH_Update+0xd8>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3304      	adds	r3, #4
 80016a0:	4602      	mov	r2, r0
 80016a2:	801a      	strh	r2, [r3, #0]
            SCH_Insert_Into_Queue(taskIndex);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fdfc 	bl	80012a4 <SCH_Insert_Into_Queue>
 80016ac:	e000      	b.n	80016b0 <SCH_Update+0xc8>
    if (ReadyQueueSize == 0) return;
 80016ae:	bf00      	nop
        }
    }
}
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001f6 	.word	0x200001f6
 80016bc:	200001ec 	.word	0x200001ec
 80016c0:	20000174 	.word	0x20000174

080016c4 <SCH_Dispatch_Tasks>:

// Thực thi các tác vụ
void SCH_Dispatch_Tasks(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < TasksSize; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	e031      	b.n	8001734 <SCH_Dispatch_Tasks+0x70>
	    //uint8_t taskIndex = ReadyQueue[i];
		  uint8_t taskIndex = i;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	71bb      	strb	r3, [r7, #6]
	    if (SCH_tasks_G[taskIndex].RunMe > 0) {
 80016d4:	79ba      	ldrb	r2, [r7, #6]
 80016d6:	491c      	ldr	r1, [pc, #112]	@ (8001748 <SCH_Dispatch_Tasks+0x84>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3308      	adds	r3, #8
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d021      	beq.n	800172e <SCH_Dispatch_Tasks+0x6a>
	        (*SCH_tasks_G[taskIndex].pTask)();
 80016ea:	79ba      	ldrb	r2, [r7, #6]
 80016ec:	4916      	ldr	r1, [pc, #88]	@ (8001748 <SCH_Dispatch_Tasks+0x84>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4798      	blx	r3
	        SCH_tasks_G[taskIndex].RunMe = 0;
 80016fc:	79ba      	ldrb	r2, [r7, #6]
 80016fe:	4912      	ldr	r1, [pc, #72]	@ (8001748 <SCH_Dispatch_Tasks+0x84>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3308      	adds	r3, #8
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]

	        if (SCH_tasks_G[taskIndex].Period == 0) {
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <SCH_Dispatch_Tasks+0x84>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3306      	adds	r3, #6
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <SCH_Dispatch_Tasks+0x6a>
	            SCH_Delete_Task(taskIndex);
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff27 	bl	800157c <SCH_Delete_Task>
	for (uint8_t i = 0; i < TasksSize; i++) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3301      	adds	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <SCH_Dispatch_Tasks+0x88>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3c8      	bcc.n	80016d0 <SCH_Dispatch_Tasks+0xc>
	        }
	    }
	}
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000174 	.word	0x20000174
 800174c:	200001f7 	.word	0x200001f7

08001750 <setTimer>:
#include "software_timer.h"
int timer_counter[10];
int timer_flag[10];
int TIMER_CYCLE = 10;

void setTimer(int number, int duration) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    if (number >= 0 && number < 10) {  // Kiểm tra giới hạn của mảng
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db10      	blt.n	8001782 <setTimer+0x32>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b09      	cmp	r3, #9
 8001764:	dc0d      	bgt.n	8001782 <setTimer+0x32>
        timer_counter[number] = duration / TIMER_CYCLE;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <setTimer+0x3c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001770:	4907      	ldr	r1, [pc, #28]	@ (8001790 <setTimer+0x40>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        timer_flag[number] = 0;
 8001778:	4a06      	ldr	r2, [pc, #24]	@ (8001794 <setTimer+0x44>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2100      	movs	r1, #0
 800177e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000034 	.word	0x20000034
 8001790:	200001f8 	.word	0x200001f8
 8001794:	20000220 	.word	0x20000220

08001798 <timer_run>:

void timer_run() {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
    for(int i = 0; i < 10; i++) {  // Sửa thành i < 10
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e01c      	b.n	80017de <timer_run+0x46>
        if(timer_counter[i] > 0) {
 80017a4:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <timer_run+0x58>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd13      	ble.n	80017d8 <timer_run+0x40>
            timer_counter[i]--;
 80017b0:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <timer_run+0x58>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <timer_run+0x58>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if(timer_counter[i] == 0) timer_flag[i] = 1;
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <timer_run+0x58>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <timer_run+0x40>
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <timer_run+0x5c>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2101      	movs	r1, #1
 80017d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < 10; i++) {  // Sửa thành i < 10
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	dddf      	ble.n	80017a4 <timer_run+0xc>
        }
    }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	200001f8 	.word	0x200001f8
 80017f4:	20000220 	.word	0x20000220

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_I2C_MspInit+0x90>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d132      	bne.n	80018e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001894:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	2312      	movs	r3, #18
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <HAL_I2C_MspInit+0x98>)
 80018aa:	f000 fa77 	bl	8001d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_I2C_MspInit+0x9c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c4:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <HAL_I2C_MspInit+0x9c>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_I2C_MspInit+0x94>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40005400 	.word	0x40005400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40010000 	.word	0x40010000

080018fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190c:	d113      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_TIM_Base_MspInit+0x44>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <HAL_TIM_Base_MspInit+0x44>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_TIM_Base_MspInit+0x44>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	201c      	movs	r0, #28
 800192c:	f000 f9ff 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001930:	201c      	movs	r0, #28
 8001932:	f000 fa18 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f8b4 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f001 fd01 	bl	80033a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000012c 	.word	0x2000012c

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f002 f85a 	bl	8003a98 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20005000 	.word	0x20005000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000248 	.word	0x20000248
 8001a18:	200003b0 	.word	0x200003b0

08001a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a28:	f7ff fff8 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a2c:	480b      	ldr	r0, [pc, #44]	@ (8001a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a2e:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a30:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a44:	4c09      	ldr	r4, [pc, #36]	@ (8001a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a52:	f002 f827 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a56:	f7ff faa3 	bl	8000fa0 <main>
  bx lr
 8001a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001a64:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 8001a68:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001a6c:	200003ac 	.word	0x200003ac

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_Init+0x28>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_Init+0x28>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f947 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff feb2 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f95f 	bl	8001d82 <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f000 f927 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000038 	.word	0x20000038
 8001af8:	20000050 	.word	0x20000050
 8001afc:	2000004c 	.word	0x2000004c

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a03      	ldr	r2, [pc, #12]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000050 	.word	0x20000050
 8001b20:	20000260 	.word	0x20000260

08001b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <HAL_GetTick+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000260 	.word	0x20000260

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffe0 	bl	8001b24 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000050 	.word	0x20000050

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4906      	ldr	r1, [pc, #24]	@ (8001c18 <__NVIC_EnableIRQ+0x34>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff90 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff2d 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff42 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff90 	bl	8001c70 <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5f 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff35 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa2 	bl	8001cd4 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	@ 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e169      	b.n	8002084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db0:	2201      	movs	r2, #1
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8158 	bne.w	800207e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a9a      	ldr	r2, [pc, #616]	@ (800203c <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d05e      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a98      	ldr	r2, [pc, #608]	@ (800203c <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d875      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dde:	4a98      	ldr	r2, [pc, #608]	@ (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d058      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001de4:	4a96      	ldr	r2, [pc, #600]	@ (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d86f      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dea:	4a96      	ldr	r2, [pc, #600]	@ (8002044 <HAL_GPIO_Init+0x2a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d052      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001df0:	4a94      	ldr	r2, [pc, #592]	@ (8002044 <HAL_GPIO_Init+0x2a8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d869      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001df6:	4a94      	ldr	r2, [pc, #592]	@ (8002048 <HAL_GPIO_Init+0x2ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d04c      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a92      	ldr	r2, [pc, #584]	@ (8002048 <HAL_GPIO_Init+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d863      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e02:	4a92      	ldr	r2, [pc, #584]	@ (800204c <HAL_GPIO_Init+0x2b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d046      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e08:	4a90      	ldr	r2, [pc, #576]	@ (800204c <HAL_GPIO_Init+0x2b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d85d      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d82a      	bhi.n	8001e68 <HAL_GPIO_Init+0xcc>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d859      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e16:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <HAL_GPIO_Init+0x80>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e71 	.word	0x08001e71
 8001e24:	08001e83 	.word	0x08001e83
 8001e28:	08001ec5 	.word	0x08001ec5
 8001e2c:	08001ecb 	.word	0x08001ecb
 8001e30:	08001ecb 	.word	0x08001ecb
 8001e34:	08001ecb 	.word	0x08001ecb
 8001e38:	08001ecb 	.word	0x08001ecb
 8001e3c:	08001ecb 	.word	0x08001ecb
 8001e40:	08001ecb 	.word	0x08001ecb
 8001e44:	08001ecb 	.word	0x08001ecb
 8001e48:	08001ecb 	.word	0x08001ecb
 8001e4c:	08001ecb 	.word	0x08001ecb
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ecb 	.word	0x08001ecb
 8001e58:	08001ecb 	.word	0x08001ecb
 8001e5c:	08001ecb 	.word	0x08001ecb
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	4a79      	ldr	r2, [pc, #484]	@ (8002050 <HAL_GPIO_Init+0x2b4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6e:	e02c      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e029      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e024      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	3308      	adds	r3, #8
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e01f      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	330c      	adds	r3, #12
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e01a      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e013      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	611a      	str	r2, [r3, #16]
          break;
 8001eb6:	e009      	b.n	8001ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	615a      	str	r2, [r3, #20]
          break;
 8001ec2:	e003      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          break;
 8001eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	@ 0xff
 8001ed0:	d801      	bhi.n	8001ed6 <HAL_GPIO_Init+0x13a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_Init+0x13e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	@ 0xff
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_GPIO_Init+0x14c>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x152>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	3b08      	subs	r3, #8
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80b1 	beq.w	800207e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	@ (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f34:	4a48      	ldr	r2, [pc, #288]	@ (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	@ (800205c <HAL_GPIO_Init+0x2c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	@ (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002064 <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3d      	ldr	r2, [pc, #244]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1e0>
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9a:	492f      	ldr	r1, [pc, #188]	@ (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	492c      	ldr	r1, [pc, #176]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4928      	ldr	r1, [pc, #160]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4922      	ldr	r1, [pc, #136]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	491e      	ldr	r1, [pc, #120]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4918      	ldr	r1, [pc, #96]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4914      	ldr	r1, [pc, #80]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d021      	beq.n	8002070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	490e      	ldr	r1, [pc, #56]	@ (800206c <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x2e2>
 800203a:	bf00      	nop
 800203c:	10320000 	.word	0x10320000
 8002040:	10310000 	.word	0x10310000
 8002044:	10220000 	.word	0x10220000
 8002048:	10210000 	.word	0x10210000
 800204c:	10120000 	.word	0x10120000
 8002050:	10110000 	.word	0x10110000
 8002054:	40021000 	.word	0x40021000
 8002058:	40010000 	.word	0x40010000
 800205c:	40010800 	.word	0x40010800
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40011400 	.word	0x40011400
 800206c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_GPIO_Init+0x304>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	43db      	mvns	r3, r3
 8002078:	4909      	ldr	r1, [pc, #36]	@ (80020a0 <HAL_GPIO_Init+0x304>)
 800207a:	4013      	ands	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	f47f ae8e 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	372c      	adds	r7, #44	@ 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e12b      	b.n	800239e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fb7e 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002198:	f001 f832 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a81      	ldr	r2, [pc, #516]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d807      	bhi.n	80021b8 <HAL_I2C_Init+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a80      	ldr	r2, [pc, #512]	@ (80023ac <HAL_I2C_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e006      	b.n	80021c6 <HAL_I2C_Init+0x92>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	@ (80023b0 <HAL_I2C_Init+0x27c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e7      	b.n	800239e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a78      	ldr	r2, [pc, #480]	@ (80023b4 <HAL_I2C_Init+0x280>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d802      	bhi.n	8002208 <HAL_I2C_Init+0xd4>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	e009      	b.n	800221c <HAL_I2C_Init+0xe8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <HAL_I2C_Init+0x284>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800222e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495c      	ldr	r1, [pc, #368]	@ (80023a8 <HAL_I2C_Init+0x274>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d819      	bhi.n	8002270 <HAL_I2C_Init+0x13c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fbb1 f3f3 	udiv	r3, r1, r3
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_I2C_Init+0x138>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e59      	subs	r1, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	e051      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 800226c:	2304      	movs	r3, #4
 800226e:	e04f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_I2C_Init+0x168>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_I2C_Init+0x18e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x196>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e022      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_I2C_Init+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e58      	subs	r0, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800233e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6911      	ldr	r1, [r2, #16]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	460b      	mov	r3, r1
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	4613      	mov	r3, r2
 80023ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fba8 	bl	8001b24 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 80e0 	bne.w	80025a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	4970      	ldr	r1, [pc, #448]	@ (80025b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f964 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0d3      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2C_Master_Transmit+0x50>
 8002408:	2302      	movs	r3, #2
 800240a:	e0cc      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d007      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	@ 0x21
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a50      	ldr	r2, [pc, #320]	@ (80025b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002474:	8979      	ldrh	r1, [r7, #10]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f89c 	bl	80025b8 <I2C_MasterRequestWrite>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e08d      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a0:	e066      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa22 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11b      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x188>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa19 	bl	8002980 <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e01a      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d194      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d006      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d003      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025e0:	d108      	bne.n	80025f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00b      	b.n	800260c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d107      	bne.n	800260c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f84f 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002632:	d103      	bne.n	800263c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e035      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e01b      	b.n	8002694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 030f 	orn	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	490e      	ldr	r1, [pc, #56]	@ (80026b4 <I2C_MasterRequestWrite+0xfc>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f898 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	@ (80026b8 <I2C_MasterRequestWrite+0x100>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f888 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e048      	b.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d044      	beq.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7ff fa25 	bl	8001b24 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d139      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10d      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	e00c      	b.n	800272c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	429a      	cmp	r2, r3
 8002730:	d116      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e023      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10d      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	e00c      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d093      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027be:	e071      	b.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ce:	d123      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e067      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d041      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7ff f980 	bl	8001b24 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d136      	bne.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10c      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4013      	ands	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e00b      	b.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	43da      	mvns	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e021      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10c      	bne.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e00b      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f af6d 	bne.w	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e034      	b.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f886 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e034      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d028      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7ff f905 	bl	8001b24 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11d      	bne.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002936:	2b80      	cmp	r3, #128	@ 0x80
 8002938:	d016      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e007      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b80      	cmp	r3, #128	@ 0x80
 8002974:	d1c3      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298c:	e034      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f83e 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d028      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7ff f8bd 	bl	8001b24 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d016      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1c3      	bne.n	800298e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d11b      	bne.n	8002a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e272      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8087 	beq.w	8002b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d112      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b89      	ldr	r3, [pc, #548]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d168      	bne.n	8002b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e24c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002ad4:	4b80      	ldr	r3, [pc, #512]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e02e      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7a      	ldr	r2, [pc, #488]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b78      	ldr	r3, [pc, #480]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a77      	ldr	r2, [pc, #476]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002b0e:	4b72      	ldr	r3, [pc, #456]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a71      	ldr	r2, [pc, #452]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b28:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b68      	ldr	r3, [pc, #416]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a67      	ldr	r2, [pc, #412]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe ffec 	bl	8001b24 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe ffe8 	bl	8001b24 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e200      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe4>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe ffd8 	bl	8001b24 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe ffd4 	bl	8001b24 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1ec      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b53      	ldr	r3, [pc, #332]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x10c>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb2:	4b49      	ldr	r3, [pc, #292]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
 8002bbe:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b43      	ldr	r3, [pc, #268]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c0      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4939      	ldr	r1, [pc, #228]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe ff8d 	bl	8001b24 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe ff89 	bl	8001b24 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4927      	ldr	r1, [pc, #156]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	@ (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe ff6c 	bl	8001b24 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe ff68 	bl	8001b24 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e180      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7fe ff4c 	bl	8001b24 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe ff48 	bl	8001b24 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e160      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f000 faba 	bl	8003228 <RCC_Delay>
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe ff32 	bl	8001b24 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe ff2e 	bl	8001b24 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e146      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	42420000 	.word	0x42420000
 8002ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b92      	ldr	r3, [pc, #584]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e9      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a6 	beq.w	8002e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b8b      	ldr	r3, [pc, #556]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b88      	ldr	r3, [pc, #544]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a87      	ldr	r2, [pc, #540]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b85      	ldr	r3, [pc, #532]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	@ (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b7f      	ldr	r3, [pc, #508]	@ (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe feef 	bl	8001b24 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe feeb 	bl	8001b24 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	@ 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e103      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b75      	ldr	r3, [pc, #468]	@ (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x312>
 8002d70:	4b6f      	ldr	r3, [pc, #444]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a6e      	ldr	r2, [pc, #440]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002d86:	4b6a      	ldr	r3, [pc, #424]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a69      	ldr	r2, [pc, #420]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b67      	ldr	r3, [pc, #412]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a66      	ldr	r2, [pc, #408]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x356>
 8002da8:	4b61      	ldr	r3, [pc, #388]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	4b58      	ldr	r3, [pc, #352]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a57      	ldr	r2, [pc, #348]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fe9f 	bl	8001b24 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe fe9b 	bl	8001b24 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0b1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x37e>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fe89 	bl	8001b24 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fe85 	bl	8001b24 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e09b      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b40      	ldr	r3, [pc, #256]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d061      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d146      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b33      	ldr	r3, [pc, #204]	@ (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fe59 	bl	8001b24 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fe55 	bl	8001b24 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e06d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	4b29      	ldr	r3, [pc, #164]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4921      	ldr	r1, [pc, #132]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a19      	ldr	r1, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	491b      	ldr	r1, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fe29 	bl	8001b24 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fe25 	bl	8001b24 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46a>
 8002ef4:	e035      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fe12 	bl	8001b24 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fe0e 	bl	8001b24 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e026      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x498>
 8002f22:	e01e      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e019      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x500>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d0      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b67      	ldr	r3, [pc, #412]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4965      	ldr	r1, [pc, #404]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e073      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4936      	ldr	r1, [pc, #216]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fe fd60 	bl	8001b24 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe fd5c 	bl	8001b24 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e053      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d210      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4922      	ldr	r1, [pc, #136]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490a      	ldr	r1, [pc, #40]	@ (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1cc>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_RCC_ClockConfig+0x1d0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fcbe 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000
 8003134:	40021000 	.word	0x40021000
 8003138:	08004470 	.word	0x08004470
 800313c:	20000038 	.word	0x20000038
 8003140:	2000004c 	.word	0x2000004c

08003144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800315e:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d002      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x30>
 800316e:	2b08      	cmp	r3, #8
 8003170:	d003      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x36>
 8003172:	e027      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	613b      	str	r3, [r7, #16]
      break;
 8003178:	e027      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	0c9b      	lsrs	r3, r3, #18
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4a17      	ldr	r2, [pc, #92]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003192:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	0c5b      	lsrs	r3, r3, #17
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 80031a6:	fb03 f202 	mul.w	r2, r3, r2
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e004      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	613b      	str	r3, [r7, #16]
      break;
 80031c2:	e002      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 80031c6:	613b      	str	r3, [r7, #16]
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	693b      	ldr	r3, [r7, #16]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	08004488 	.word	0x08004488
 80031e4:	08004498 	.word	0x08004498
 80031e8:	003d0900 	.word	0x003d0900

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b02      	ldr	r3, [pc, #8]	@ (80031fc <HAL_RCC_GetHCLKFreq+0x10>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20000038 	.word	0x20000038

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff2 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	08004480 	.word	0x08004480

08003228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003230:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <RCC_Delay+0x34>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <RCC_Delay+0x38>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0a5b      	lsrs	r3, r3, #9
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003244:	bf00      	nop
  }
  while (Delay --);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e5a      	subs	r2, r3, #1
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <RCC_Delay+0x1c>
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	20000038 	.word	0x20000038
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e041      	b.n	80032fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fb36 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fa5c 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d001      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e03a      	b.n	8003392 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a18      	ldr	r2, [pc, #96]	@ (800339c <HAL_TIM_Base_Start_IT+0x98>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00e      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x58>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d009      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x58>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x58>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a13      	ldr	r2, [pc, #76]	@ (80033a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d111      	bne.n	8003380 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d010      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	e007      	b.n	8003390 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0202 	mvn.w	r2, #2
 80033dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f998 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f98b 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f99a 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0204 	mvn.w	r2, #4
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f972 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f965 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f974 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d020      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0208 	mvn.w	r2, #8
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f94c 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f93f 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f94e 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f926 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f919 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f928 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd feb4 	bl	800127c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa7f 	bl	8003a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8f8 	bl	800374c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0220 	mvn.w	r2, #32
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa52 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0b4      	b.n	800370e <HAL_TIM_ConfigClockSource+0x186>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d03e      	beq.n	800365c <HAL_TIM_ConfigClockSource+0xd4>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e2:	f200 8087 	bhi.w	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ea:	f000 8086 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x172>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d87f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b70      	cmp	r3, #112	@ 0x70
 80035f6:	d01a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xa6>
 80035f8:	2b70      	cmp	r3, #112	@ 0x70
 80035fa:	d87b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b60      	cmp	r3, #96	@ 0x60
 80035fe:	d050      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d877      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b50      	cmp	r3, #80	@ 0x50
 8003606:	d03c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0xfa>
 8003608:	2b50      	cmp	r3, #80	@ 0x50
 800360a:	d873      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d058      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d86f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b30      	cmp	r3, #48	@ 0x30
 8003616:	d064      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	2b30      	cmp	r3, #48	@ 0x30
 800361a:	d86b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d060      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d867      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05c      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b10      	cmp	r3, #16
 800362a:	d05a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	e062      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	f000 f974 	bl	800392a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	609a      	str	r2, [r3, #8]
      break;
 800365a:	e04f      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	f000 f95d 	bl	800392a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800367e:	609a      	str	r2, [r3, #8]
      break;
 8003680:	e03c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	461a      	mov	r2, r3
 8003690:	f000 f8d4 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2150      	movs	r1, #80	@ 0x50
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f92b 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e02c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 f8f2 	bl	8003898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2160      	movs	r1, #96	@ 0x60
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f91b 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e01c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 f8b4 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f90b 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 f902 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036f2:	e003      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e000      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
	...

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a2f      	ldr	r2, [pc, #188]	@ (8003830 <TIM_Base_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x30>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x30>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <TIM_Base_SetConfig+0xd4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x30>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a2b      	ldr	r2, [pc, #172]	@ (8003838 <TIM_Base_SetConfig+0xd8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <TIM_Base_SetConfig+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b0:	d007      	beq.n	80037c2 <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <TIM_Base_SetConfig+0xd4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <TIM_Base_SetConfig+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <TIM_Base_SetConfig+0xd0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]
  }
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800

0800383c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 030a 	bic.w	r3, r3, #10
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0210 	bic.w	r2, r3, #16
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	431a      	orrs	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	609a      	str	r2, [r3, #8]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e046      	b.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10c      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <siprintf>:
 8003a48:	b40e      	push	{r1, r2, r3}
 8003a4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a4e:	b500      	push	{lr}
 8003a50:	b09c      	sub	sp, #112	@ 0x70
 8003a52:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	9107      	str	r1, [sp, #28]
 8003a5a:	9104      	str	r1, [sp, #16]
 8003a5c:	4808      	ldr	r0, [pc, #32]	@ (8003a80 <siprintf+0x38>)
 8003a5e:	4909      	ldr	r1, [pc, #36]	@ (8003a84 <siprintf+0x3c>)
 8003a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a64:	9105      	str	r1, [sp, #20]
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	f000 f992 	bl	8003d94 <_svfiprintf_r>
 8003a70:	2200      	movs	r2, #0
 8003a72:	9b02      	ldr	r3, [sp, #8]
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	b01c      	add	sp, #112	@ 0x70
 8003a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a7c:	b003      	add	sp, #12
 8003a7e:	4770      	bx	lr
 8003a80:	20000054 	.word	0x20000054
 8003a84:	ffff0208 	.word	0xffff0208

08003a88 <memset>:
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4402      	add	r2, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	@ (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000054 	.word	0x20000054

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	@ (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	f000 fc78 	bl	80043a8 <_init>
 8003ab8:	2600      	movs	r6, #0
 8003aba:	4d0a      	ldr	r5, [pc, #40]	@ (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	080044d0 	.word	0x080044d0
 8003ae0:	080044d0 	.word	0x080044d0
 8003ae4:	080044d0 	.word	0x080044d0
 8003ae8:	080044d4 	.word	0x080044d4

08003aec <__retarget_lock_acquire_recursive>:
 8003aec:	4770      	bx	lr

08003aee <__retarget_lock_release_recursive>:
 8003aee:	4770      	bx	lr

08003af0 <_free_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4605      	mov	r5, r0
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d040      	beq.n	8003b7a <_free_r+0x8a>
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f0c      	subs	r4, r1, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfb8      	it	lt
 8003b02:	18e4      	addlt	r4, r4, r3
 8003b04:	f000 f8de 	bl	8003cc4 <__malloc_lock>
 8003b08:	4a1c      	ldr	r2, [pc, #112]	@ (8003b7c <_free_r+0x8c>)
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	b933      	cbnz	r3, 8003b1c <_free_r+0x2c>
 8003b0e:	6063      	str	r3, [r4, #4]
 8003b10:	6014      	str	r4, [r2, #0]
 8003b12:	4628      	mov	r0, r5
 8003b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b18:	f000 b8da 	b.w	8003cd0 <__malloc_unlock>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d908      	bls.n	8003b32 <_free_r+0x42>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	1821      	adds	r1, r4, r0
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf01      	itttt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	1809      	addeq	r1, r1, r0
 8003b2e:	6021      	streq	r1, [r4, #0]
 8003b30:	e7ed      	b.n	8003b0e <_free_r+0x1e>
 8003b32:	461a      	mov	r2, r3
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	b10b      	cbz	r3, 8003b3c <_free_r+0x4c>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d9fa      	bls.n	8003b32 <_free_r+0x42>
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	1850      	adds	r0, r2, r1
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d10b      	bne.n	8003b5c <_free_r+0x6c>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	4401      	add	r1, r0
 8003b48:	1850      	adds	r0, r2, r1
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	d1e0      	bne.n	8003b12 <_free_r+0x22>
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4408      	add	r0, r1
 8003b56:	6010      	str	r0, [r2, #0]
 8003b58:	6053      	str	r3, [r2, #4]
 8003b5a:	e7da      	b.n	8003b12 <_free_r+0x22>
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x74>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	e7d6      	b.n	8003b12 <_free_r+0x22>
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	1821      	adds	r1, r4, r0
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	bf01      	itttt	eq
 8003b6c:	6819      	ldreq	r1, [r3, #0]
 8003b6e:	685b      	ldreq	r3, [r3, #4]
 8003b70:	1809      	addeq	r1, r1, r0
 8003b72:	6021      	streq	r1, [r4, #0]
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6054      	str	r4, [r2, #4]
 8003b78:	e7cb      	b.n	8003b12 <_free_r+0x22>
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	200003a8 	.word	0x200003a8

08003b80 <sbrk_aligned>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	4e0f      	ldr	r6, [pc, #60]	@ (8003bc0 <sbrk_aligned+0x40>)
 8003b84:	460c      	mov	r4, r1
 8003b86:	6831      	ldr	r1, [r6, #0]
 8003b88:	4605      	mov	r5, r0
 8003b8a:	b911      	cbnz	r1, 8003b92 <sbrk_aligned+0x12>
 8003b8c:	f000 fbaa 	bl	80042e4 <_sbrk_r>
 8003b90:	6030      	str	r0, [r6, #0]
 8003b92:	4621      	mov	r1, r4
 8003b94:	4628      	mov	r0, r5
 8003b96:	f000 fba5 	bl	80042e4 <_sbrk_r>
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	d103      	bne.n	8003ba6 <sbrk_aligned+0x26>
 8003b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	1cc4      	adds	r4, r0, #3
 8003ba8:	f024 0403 	bic.w	r4, r4, #3
 8003bac:	42a0      	cmp	r0, r4
 8003bae:	d0f8      	beq.n	8003ba2 <sbrk_aligned+0x22>
 8003bb0:	1a21      	subs	r1, r4, r0
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f000 fb96 	bl	80042e4 <_sbrk_r>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d1f2      	bne.n	8003ba2 <sbrk_aligned+0x22>
 8003bbc:	e7ef      	b.n	8003b9e <sbrk_aligned+0x1e>
 8003bbe:	bf00      	nop
 8003bc0:	200003a4 	.word	0x200003a4

08003bc4 <_malloc_r>:
 8003bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc8:	1ccd      	adds	r5, r1, #3
 8003bca:	f025 0503 	bic.w	r5, r5, #3
 8003bce:	3508      	adds	r5, #8
 8003bd0:	2d0c      	cmp	r5, #12
 8003bd2:	bf38      	it	cc
 8003bd4:	250c      	movcc	r5, #12
 8003bd6:	2d00      	cmp	r5, #0
 8003bd8:	4606      	mov	r6, r0
 8003bda:	db01      	blt.n	8003be0 <_malloc_r+0x1c>
 8003bdc:	42a9      	cmp	r1, r5
 8003bde:	d904      	bls.n	8003bea <_malloc_r+0x26>
 8003be0:	230c      	movs	r3, #12
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	2000      	movs	r0, #0
 8003be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cc0 <_malloc_r+0xfc>
 8003bee:	f000 f869 	bl	8003cc4 <__malloc_lock>
 8003bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf6:	461c      	mov	r4, r3
 8003bf8:	bb44      	cbnz	r4, 8003c4c <_malloc_r+0x88>
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f7ff ffbf 	bl	8003b80 <sbrk_aligned>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	4604      	mov	r4, r0
 8003c06:	d158      	bne.n	8003cba <_malloc_r+0xf6>
 8003c08:	f8d8 4000 	ldr.w	r4, [r8]
 8003c0c:	4627      	mov	r7, r4
 8003c0e:	2f00      	cmp	r7, #0
 8003c10:	d143      	bne.n	8003c9a <_malloc_r+0xd6>
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	d04b      	beq.n	8003cae <_malloc_r+0xea>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	4639      	mov	r1, r7
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	eb04 0903 	add.w	r9, r4, r3
 8003c20:	f000 fb60 	bl	80042e4 <_sbrk_r>
 8003c24:	4581      	cmp	r9, r0
 8003c26:	d142      	bne.n	8003cae <_malloc_r+0xea>
 8003c28:	6821      	ldr	r1, [r4, #0]
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	1a6d      	subs	r5, r5, r1
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f7ff ffa6 	bl	8003b80 <sbrk_aligned>
 8003c34:	3001      	adds	r0, #1
 8003c36:	d03a      	beq.n	8003cae <_malloc_r+0xea>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	442b      	add	r3, r5
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	bb62      	cbnz	r2, 8003ca0 <_malloc_r+0xdc>
 8003c46:	f8c8 7000 	str.w	r7, [r8]
 8003c4a:	e00f      	b.n	8003c6c <_malloc_r+0xa8>
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	1b52      	subs	r2, r2, r5
 8003c50:	d420      	bmi.n	8003c94 <_malloc_r+0xd0>
 8003c52:	2a0b      	cmp	r2, #11
 8003c54:	d917      	bls.n	8003c86 <_malloc_r+0xc2>
 8003c56:	1961      	adds	r1, r4, r5
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	6025      	str	r5, [r4, #0]
 8003c5c:	bf18      	it	ne
 8003c5e:	6059      	strne	r1, [r3, #4]
 8003c60:	6863      	ldr	r3, [r4, #4]
 8003c62:	bf08      	it	eq
 8003c64:	f8c8 1000 	streq.w	r1, [r8]
 8003c68:	5162      	str	r2, [r4, r5]
 8003c6a:	604b      	str	r3, [r1, #4]
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f000 f82f 	bl	8003cd0 <__malloc_unlock>
 8003c72:	f104 000b 	add.w	r0, r4, #11
 8003c76:	1d23      	adds	r3, r4, #4
 8003c78:	f020 0007 	bic.w	r0, r0, #7
 8003c7c:	1ac2      	subs	r2, r0, r3
 8003c7e:	bf1c      	itt	ne
 8003c80:	1a1b      	subne	r3, r3, r0
 8003c82:	50a3      	strne	r3, [r4, r2]
 8003c84:	e7af      	b.n	8003be6 <_malloc_r+0x22>
 8003c86:	6862      	ldr	r2, [r4, #4]
 8003c88:	42a3      	cmp	r3, r4
 8003c8a:	bf0c      	ite	eq
 8003c8c:	f8c8 2000 	streq.w	r2, [r8]
 8003c90:	605a      	strne	r2, [r3, #4]
 8003c92:	e7eb      	b.n	8003c6c <_malloc_r+0xa8>
 8003c94:	4623      	mov	r3, r4
 8003c96:	6864      	ldr	r4, [r4, #4]
 8003c98:	e7ae      	b.n	8003bf8 <_malloc_r+0x34>
 8003c9a:	463c      	mov	r4, r7
 8003c9c:	687f      	ldr	r7, [r7, #4]
 8003c9e:	e7b6      	b.n	8003c0e <_malloc_r+0x4a>
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d1fb      	bne.n	8003ca0 <_malloc_r+0xdc>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6053      	str	r3, [r2, #4]
 8003cac:	e7de      	b.n	8003c6c <_malloc_r+0xa8>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	f000 f80c 	bl	8003cd0 <__malloc_unlock>
 8003cb8:	e794      	b.n	8003be4 <_malloc_r+0x20>
 8003cba:	6005      	str	r5, [r0, #0]
 8003cbc:	e7d6      	b.n	8003c6c <_malloc_r+0xa8>
 8003cbe:	bf00      	nop
 8003cc0:	200003a8 	.word	0x200003a8

08003cc4 <__malloc_lock>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	@ (8003ccc <__malloc_lock+0x8>)
 8003cc6:	f7ff bf11 	b.w	8003aec <__retarget_lock_acquire_recursive>
 8003cca:	bf00      	nop
 8003ccc:	200003a0 	.word	0x200003a0

08003cd0 <__malloc_unlock>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	@ (8003cd8 <__malloc_unlock+0x8>)
 8003cd2:	f7ff bf0c 	b.w	8003aee <__retarget_lock_release_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	200003a0 	.word	0x200003a0

08003cdc <__ssputs_r>:
 8003cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	461f      	mov	r7, r3
 8003ce2:	688e      	ldr	r6, [r1, #8]
 8003ce4:	4682      	mov	sl, r0
 8003ce6:	42be      	cmp	r6, r7
 8003ce8:	460c      	mov	r4, r1
 8003cea:	4690      	mov	r8, r2
 8003cec:	680b      	ldr	r3, [r1, #0]
 8003cee:	d82d      	bhi.n	8003d4c <__ssputs_r+0x70>
 8003cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cf8:	d026      	beq.n	8003d48 <__ssputs_r+0x6c>
 8003cfa:	6965      	ldr	r5, [r4, #20]
 8003cfc:	6909      	ldr	r1, [r1, #16]
 8003cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d02:	eba3 0901 	sub.w	r9, r3, r1
 8003d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d0a:	1c7b      	adds	r3, r7, #1
 8003d0c:	444b      	add	r3, r9
 8003d0e:	106d      	asrs	r5, r5, #1
 8003d10:	429d      	cmp	r5, r3
 8003d12:	bf38      	it	cc
 8003d14:	461d      	movcc	r5, r3
 8003d16:	0553      	lsls	r3, r2, #21
 8003d18:	d527      	bpl.n	8003d6a <__ssputs_r+0x8e>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	f7ff ff52 	bl	8003bc4 <_malloc_r>
 8003d20:	4606      	mov	r6, r0
 8003d22:	b360      	cbz	r0, 8003d7e <__ssputs_r+0xa2>
 8003d24:	464a      	mov	r2, r9
 8003d26:	6921      	ldr	r1, [r4, #16]
 8003d28:	f000 fafa 	bl	8004320 <memcpy>
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d36:	81a3      	strh	r3, [r4, #12]
 8003d38:	6126      	str	r6, [r4, #16]
 8003d3a:	444e      	add	r6, r9
 8003d3c:	6026      	str	r6, [r4, #0]
 8003d3e:	463e      	mov	r6, r7
 8003d40:	6165      	str	r5, [r4, #20]
 8003d42:	eba5 0509 	sub.w	r5, r5, r9
 8003d46:	60a5      	str	r5, [r4, #8]
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	d900      	bls.n	8003d4e <__ssputs_r+0x72>
 8003d4c:	463e      	mov	r6, r7
 8003d4e:	4632      	mov	r2, r6
 8003d50:	4641      	mov	r1, r8
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	f000 faac 	bl	80042b0 <memmove>
 8003d58:	2000      	movs	r0, #0
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	1b9b      	subs	r3, r3, r6
 8003d5e:	60a3      	str	r3, [r4, #8]
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	4433      	add	r3, r6
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6a:	462a      	mov	r2, r5
 8003d6c:	f000 fae6 	bl	800433c <_realloc_r>
 8003d70:	4606      	mov	r6, r0
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d1e0      	bne.n	8003d38 <__ssputs_r+0x5c>
 8003d76:	4650      	mov	r0, sl
 8003d78:	6921      	ldr	r1, [r4, #16]
 8003d7a:	f7ff feb9 	bl	8003af0 <_free_r>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	f8ca 3000 	str.w	r3, [sl]
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	e7e9      	b.n	8003d66 <__ssputs_r+0x8a>
	...

08003d94 <_svfiprintf_r>:
 8003d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d98:	4698      	mov	r8, r3
 8003d9a:	898b      	ldrh	r3, [r1, #12]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	061b      	lsls	r3, r3, #24
 8003da0:	460d      	mov	r5, r1
 8003da2:	4614      	mov	r4, r2
 8003da4:	b09d      	sub	sp, #116	@ 0x74
 8003da6:	d510      	bpl.n	8003dca <_svfiprintf_r+0x36>
 8003da8:	690b      	ldr	r3, [r1, #16]
 8003daa:	b973      	cbnz	r3, 8003dca <_svfiprintf_r+0x36>
 8003dac:	2140      	movs	r1, #64	@ 0x40
 8003dae:	f7ff ff09 	bl	8003bc4 <_malloc_r>
 8003db2:	6028      	str	r0, [r5, #0]
 8003db4:	6128      	str	r0, [r5, #16]
 8003db6:	b930      	cbnz	r0, 8003dc6 <_svfiprintf_r+0x32>
 8003db8:	230c      	movs	r3, #12
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	b01d      	add	sp, #116	@ 0x74
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc6:	2340      	movs	r3, #64	@ 0x40
 8003dc8:	616b      	str	r3, [r5, #20]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dce:	2320      	movs	r3, #32
 8003dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dd4:	2330      	movs	r3, #48	@ 0x30
 8003dd6:	f04f 0901 	mov.w	r9, #1
 8003dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f78 <_svfiprintf_r+0x1e4>
 8003de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003de6:	4623      	mov	r3, r4
 8003de8:	469a      	mov	sl, r3
 8003dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dee:	b10a      	cbz	r2, 8003df4 <_svfiprintf_r+0x60>
 8003df0:	2a25      	cmp	r2, #37	@ 0x25
 8003df2:	d1f9      	bne.n	8003de8 <_svfiprintf_r+0x54>
 8003df4:	ebba 0b04 	subs.w	fp, sl, r4
 8003df8:	d00b      	beq.n	8003e12 <_svfiprintf_r+0x7e>
 8003dfa:	465b      	mov	r3, fp
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4638      	mov	r0, r7
 8003e02:	f7ff ff6b 	bl	8003cdc <__ssputs_r>
 8003e06:	3001      	adds	r0, #1
 8003e08:	f000 80a7 	beq.w	8003f5a <_svfiprintf_r+0x1c6>
 8003e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e0e:	445a      	add	r2, fp
 8003e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e12:	f89a 3000 	ldrb.w	r3, [sl]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 809f 	beq.w	8003f5a <_svfiprintf_r+0x1c6>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e26:	f10a 0a01 	add.w	sl, sl, #1
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	9307      	str	r3, [sp, #28]
 8003e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e34:	4654      	mov	r4, sl
 8003e36:	2205      	movs	r2, #5
 8003e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3c:	484e      	ldr	r0, [pc, #312]	@ (8003f78 <_svfiprintf_r+0x1e4>)
 8003e3e:	f000 fa61 	bl	8004304 <memchr>
 8003e42:	9a04      	ldr	r2, [sp, #16]
 8003e44:	b9d8      	cbnz	r0, 8003e7e <_svfiprintf_r+0xea>
 8003e46:	06d0      	lsls	r0, r2, #27
 8003e48:	bf44      	itt	mi
 8003e4a:	2320      	movmi	r3, #32
 8003e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e50:	0711      	lsls	r1, r2, #28
 8003e52:	bf44      	itt	mi
 8003e54:	232b      	movmi	r3, #43	@ 0x2b
 8003e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e60:	d015      	beq.n	8003e8e <_svfiprintf_r+0xfa>
 8003e62:	4654      	mov	r4, sl
 8003e64:	2000      	movs	r0, #0
 8003e66:	f04f 0c0a 	mov.w	ip, #10
 8003e6a:	9a07      	ldr	r2, [sp, #28]
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e72:	3b30      	subs	r3, #48	@ 0x30
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d94b      	bls.n	8003f10 <_svfiprintf_r+0x17c>
 8003e78:	b1b0      	cbz	r0, 8003ea8 <_svfiprintf_r+0x114>
 8003e7a:	9207      	str	r2, [sp, #28]
 8003e7c:	e014      	b.n	8003ea8 <_svfiprintf_r+0x114>
 8003e7e:	eba0 0308 	sub.w	r3, r0, r8
 8003e82:	fa09 f303 	lsl.w	r3, r9, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	e7d2      	b.n	8003e34 <_svfiprintf_r+0xa0>
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	1d19      	adds	r1, r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	9103      	str	r1, [sp, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfbb      	ittet	lt
 8003e9a:	425b      	neglt	r3, r3
 8003e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea0:	9307      	strge	r3, [sp, #28]
 8003ea2:	9307      	strlt	r3, [sp, #28]
 8003ea4:	bfb8      	it	lt
 8003ea6:	9204      	strlt	r2, [sp, #16]
 8003ea8:	7823      	ldrb	r3, [r4, #0]
 8003eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eac:	d10a      	bne.n	8003ec4 <_svfiprintf_r+0x130>
 8003eae:	7863      	ldrb	r3, [r4, #1]
 8003eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb2:	d132      	bne.n	8003f1a <_svfiprintf_r+0x186>
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	3402      	adds	r4, #2
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	9203      	str	r2, [sp, #12]
 8003ebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ec2:	9305      	str	r3, [sp, #20]
 8003ec4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f7c <_svfiprintf_r+0x1e8>
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4650      	mov	r0, sl
 8003ecc:	7821      	ldrb	r1, [r4, #0]
 8003ece:	f000 fa19 	bl	8004304 <memchr>
 8003ed2:	b138      	cbz	r0, 8003ee4 <_svfiprintf_r+0x150>
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	eba0 000a 	sub.w	r0, r0, sl
 8003edc:	4082      	lsls	r2, r0
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee8:	2206      	movs	r2, #6
 8003eea:	4825      	ldr	r0, [pc, #148]	@ (8003f80 <_svfiprintf_r+0x1ec>)
 8003eec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ef0:	f000 fa08 	bl	8004304 <memchr>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d036      	beq.n	8003f66 <_svfiprintf_r+0x1d2>
 8003ef8:	4b22      	ldr	r3, [pc, #136]	@ (8003f84 <_svfiprintf_r+0x1f0>)
 8003efa:	bb1b      	cbnz	r3, 8003f44 <_svfiprintf_r+0x1b0>
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	3307      	adds	r3, #7
 8003f00:	f023 0307 	bic.w	r3, r3, #7
 8003f04:	3308      	adds	r3, #8
 8003f06:	9303      	str	r3, [sp, #12]
 8003f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f0a:	4433      	add	r3, r6
 8003f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f0e:	e76a      	b.n	8003de6 <_svfiprintf_r+0x52>
 8003f10:	460c      	mov	r4, r1
 8003f12:	2001      	movs	r0, #1
 8003f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f18:	e7a8      	b.n	8003e6c <_svfiprintf_r+0xd8>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f04f 0c0a 	mov.w	ip, #10
 8003f20:	4619      	mov	r1, r3
 8003f22:	3401      	adds	r4, #1
 8003f24:	9305      	str	r3, [sp, #20]
 8003f26:	4620      	mov	r0, r4
 8003f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f2c:	3a30      	subs	r2, #48	@ 0x30
 8003f2e:	2a09      	cmp	r2, #9
 8003f30:	d903      	bls.n	8003f3a <_svfiprintf_r+0x1a6>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0c6      	beq.n	8003ec4 <_svfiprintf_r+0x130>
 8003f36:	9105      	str	r1, [sp, #20]
 8003f38:	e7c4      	b.n	8003ec4 <_svfiprintf_r+0x130>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f42:	e7f0      	b.n	8003f26 <_svfiprintf_r+0x192>
 8003f44:	ab03      	add	r3, sp, #12
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <_svfiprintf_r+0x1f4>)
 8003f4e:	a904      	add	r1, sp, #16
 8003f50:	f3af 8000 	nop.w
 8003f54:	1c42      	adds	r2, r0, #1
 8003f56:	4606      	mov	r6, r0
 8003f58:	d1d6      	bne.n	8003f08 <_svfiprintf_r+0x174>
 8003f5a:	89ab      	ldrh	r3, [r5, #12]
 8003f5c:	065b      	lsls	r3, r3, #25
 8003f5e:	f53f af2d 	bmi.w	8003dbc <_svfiprintf_r+0x28>
 8003f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f64:	e72c      	b.n	8003dc0 <_svfiprintf_r+0x2c>
 8003f66:	ab03      	add	r3, sp, #12
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <_svfiprintf_r+0x1f4>)
 8003f70:	a904      	add	r1, sp, #16
 8003f72:	f000 f87d 	bl	8004070 <_printf_i>
 8003f76:	e7ed      	b.n	8003f54 <_svfiprintf_r+0x1c0>
 8003f78:	0800449a 	.word	0x0800449a
 8003f7c:	080044a0 	.word	0x080044a0
 8003f80:	080044a4 	.word	0x080044a4
 8003f84:	00000000 	.word	0x00000000
 8003f88:	08003cdd 	.word	0x08003cdd

08003f8c <_printf_common>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	4616      	mov	r6, r2
 8003f92:	4698      	mov	r8, r3
 8003f94:	688a      	ldr	r2, [r1, #8]
 8003f96:	690b      	ldr	r3, [r1, #16]
 8003f98:	4607      	mov	r7, r0
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bfb8      	it	lt
 8003f9e:	4613      	movlt	r3, r2
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fac:	b10a      	cbz	r2, 8003fb2 <_printf_common+0x26>
 8003fae:	3301      	adds	r3, #1
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0699      	lsls	r1, r3, #26
 8003fb6:	bf42      	ittt	mi
 8003fb8:	6833      	ldrmi	r3, [r6, #0]
 8003fba:	3302      	addmi	r3, #2
 8003fbc:	6033      	strmi	r3, [r6, #0]
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	f015 0506 	ands.w	r5, r5, #6
 8003fc4:	d106      	bne.n	8003fd4 <_printf_common+0x48>
 8003fc6:	f104 0a19 	add.w	sl, r4, #25
 8003fca:	68e3      	ldr	r3, [r4, #12]
 8003fcc:	6832      	ldr	r2, [r6, #0]
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	42ab      	cmp	r3, r5
 8003fd2:	dc2b      	bgt.n	800402c <_printf_common+0xa0>
 8003fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fd8:	6822      	ldr	r2, [r4, #0]
 8003fda:	3b00      	subs	r3, #0
 8003fdc:	bf18      	it	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	0692      	lsls	r2, r2, #26
 8003fe2:	d430      	bmi.n	8004046 <_printf_common+0xba>
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fec:	47c8      	blx	r9
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d023      	beq.n	800403a <_printf_common+0xae>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	6922      	ldr	r2, [r4, #16]
 8003ff6:	f003 0306 	and.w	r3, r3, #6
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf14      	ite	ne
 8003ffe:	2500      	movne	r5, #0
 8004000:	6833      	ldreq	r3, [r6, #0]
 8004002:	f04f 0600 	mov.w	r6, #0
 8004006:	bf08      	it	eq
 8004008:	68e5      	ldreq	r5, [r4, #12]
 800400a:	f104 041a 	add.w	r4, r4, #26
 800400e:	bf08      	it	eq
 8004010:	1aed      	subeq	r5, r5, r3
 8004012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004016:	bf08      	it	eq
 8004018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800401c:	4293      	cmp	r3, r2
 800401e:	bfc4      	itt	gt
 8004020:	1a9b      	subgt	r3, r3, r2
 8004022:	18ed      	addgt	r5, r5, r3
 8004024:	42b5      	cmp	r5, r6
 8004026:	d11a      	bne.n	800405e <_printf_common+0xd2>
 8004028:	2000      	movs	r0, #0
 800402a:	e008      	b.n	800403e <_printf_common+0xb2>
 800402c:	2301      	movs	r3, #1
 800402e:	4652      	mov	r2, sl
 8004030:	4641      	mov	r1, r8
 8004032:	4638      	mov	r0, r7
 8004034:	47c8      	blx	r9
 8004036:	3001      	adds	r0, #1
 8004038:	d103      	bne.n	8004042 <_printf_common+0xb6>
 800403a:	f04f 30ff 	mov.w	r0, #4294967295
 800403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004042:	3501      	adds	r5, #1
 8004044:	e7c1      	b.n	8003fca <_printf_common+0x3e>
 8004046:	2030      	movs	r0, #48	@ 0x30
 8004048:	18e1      	adds	r1, r4, r3
 800404a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004054:	4422      	add	r2, r4
 8004056:	3302      	adds	r3, #2
 8004058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800405c:	e7c2      	b.n	8003fe4 <_printf_common+0x58>
 800405e:	2301      	movs	r3, #1
 8004060:	4622      	mov	r2, r4
 8004062:	4641      	mov	r1, r8
 8004064:	4638      	mov	r0, r7
 8004066:	47c8      	blx	r9
 8004068:	3001      	adds	r0, #1
 800406a:	d0e6      	beq.n	800403a <_printf_common+0xae>
 800406c:	3601      	adds	r6, #1
 800406e:	e7d9      	b.n	8004024 <_printf_common+0x98>

08004070 <_printf_i>:
 8004070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	7e0f      	ldrb	r7, [r1, #24]
 8004076:	4691      	mov	r9, r2
 8004078:	2f78      	cmp	r7, #120	@ 0x78
 800407a:	4680      	mov	r8, r0
 800407c:	460c      	mov	r4, r1
 800407e:	469a      	mov	sl, r3
 8004080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004086:	d807      	bhi.n	8004098 <_printf_i+0x28>
 8004088:	2f62      	cmp	r7, #98	@ 0x62
 800408a:	d80a      	bhi.n	80040a2 <_printf_i+0x32>
 800408c:	2f00      	cmp	r7, #0
 800408e:	f000 80d3 	beq.w	8004238 <_printf_i+0x1c8>
 8004092:	2f58      	cmp	r7, #88	@ 0x58
 8004094:	f000 80ba 	beq.w	800420c <_printf_i+0x19c>
 8004098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800409c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040a0:	e03a      	b.n	8004118 <_printf_i+0xa8>
 80040a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040a6:	2b15      	cmp	r3, #21
 80040a8:	d8f6      	bhi.n	8004098 <_printf_i+0x28>
 80040aa:	a101      	add	r1, pc, #4	@ (adr r1, 80040b0 <_printf_i+0x40>)
 80040ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b0:	08004109 	.word	0x08004109
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	08004099 	.word	0x08004099
 80040bc:	08004099 	.word	0x08004099
 80040c0:	08004099 	.word	0x08004099
 80040c4:	08004099 	.word	0x08004099
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004099 	.word	0x08004099
 80040d0:	08004099 	.word	0x08004099
 80040d4:	08004099 	.word	0x08004099
 80040d8:	08004099 	.word	0x08004099
 80040dc:	0800421f 	.word	0x0800421f
 80040e0:	08004147 	.word	0x08004147
 80040e4:	080041d9 	.word	0x080041d9
 80040e8:	08004099 	.word	0x08004099
 80040ec:	08004099 	.word	0x08004099
 80040f0:	08004241 	.word	0x08004241
 80040f4:	08004099 	.word	0x08004099
 80040f8:	08004147 	.word	0x08004147
 80040fc:	08004099 	.word	0x08004099
 8004100:	08004099 	.word	0x08004099
 8004104:	080041e1 	.word	0x080041e1
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6032      	str	r2, [r6, #0]
 8004110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004118:	2301      	movs	r3, #1
 800411a:	e09e      	b.n	800425a <_printf_i+0x1ea>
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	1d19      	adds	r1, r3, #4
 8004122:	6031      	str	r1, [r6, #0]
 8004124:	0606      	lsls	r6, r0, #24
 8004126:	d501      	bpl.n	800412c <_printf_i+0xbc>
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	e003      	b.n	8004134 <_printf_i+0xc4>
 800412c:	0645      	lsls	r5, r0, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0xb8>
 8004130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004134:	2d00      	cmp	r5, #0
 8004136:	da03      	bge.n	8004140 <_printf_i+0xd0>
 8004138:	232d      	movs	r3, #45	@ 0x2d
 800413a:	426d      	negs	r5, r5
 800413c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004140:	230a      	movs	r3, #10
 8004142:	4859      	ldr	r0, [pc, #356]	@ (80042a8 <_printf_i+0x238>)
 8004144:	e011      	b.n	800416a <_printf_i+0xfa>
 8004146:	6821      	ldr	r1, [r4, #0]
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	0608      	lsls	r0, r1, #24
 800414c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004150:	d402      	bmi.n	8004158 <_printf_i+0xe8>
 8004152:	0649      	lsls	r1, r1, #25
 8004154:	bf48      	it	mi
 8004156:	b2ad      	uxthmi	r5, r5
 8004158:	2f6f      	cmp	r7, #111	@ 0x6f
 800415a:	6033      	str	r3, [r6, #0]
 800415c:	bf14      	ite	ne
 800415e:	230a      	movne	r3, #10
 8004160:	2308      	moveq	r3, #8
 8004162:	4851      	ldr	r0, [pc, #324]	@ (80042a8 <_printf_i+0x238>)
 8004164:	2100      	movs	r1, #0
 8004166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800416a:	6866      	ldr	r6, [r4, #4]
 800416c:	2e00      	cmp	r6, #0
 800416e:	bfa8      	it	ge
 8004170:	6821      	ldrge	r1, [r4, #0]
 8004172:	60a6      	str	r6, [r4, #8]
 8004174:	bfa4      	itt	ge
 8004176:	f021 0104 	bicge.w	r1, r1, #4
 800417a:	6021      	strge	r1, [r4, #0]
 800417c:	b90d      	cbnz	r5, 8004182 <_printf_i+0x112>
 800417e:	2e00      	cmp	r6, #0
 8004180:	d04b      	beq.n	800421a <_printf_i+0x1aa>
 8004182:	4616      	mov	r6, r2
 8004184:	fbb5 f1f3 	udiv	r1, r5, r3
 8004188:	fb03 5711 	mls	r7, r3, r1, r5
 800418c:	5dc7      	ldrb	r7, [r0, r7]
 800418e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004192:	462f      	mov	r7, r5
 8004194:	42bb      	cmp	r3, r7
 8004196:	460d      	mov	r5, r1
 8004198:	d9f4      	bls.n	8004184 <_printf_i+0x114>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d10b      	bne.n	80041b6 <_printf_i+0x146>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	07df      	lsls	r7, r3, #31
 80041a2:	d508      	bpl.n	80041b6 <_printf_i+0x146>
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	6861      	ldr	r1, [r4, #4]
 80041a8:	4299      	cmp	r1, r3
 80041aa:	bfde      	ittt	le
 80041ac:	2330      	movle	r3, #48	@ 0x30
 80041ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b6:	1b92      	subs	r2, r2, r6
 80041b8:	6122      	str	r2, [r4, #16]
 80041ba:	464b      	mov	r3, r9
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f8cd a000 	str.w	sl, [sp]
 80041c4:	aa03      	add	r2, sp, #12
 80041c6:	f7ff fee1 	bl	8003f8c <_printf_common>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d14a      	bne.n	8004264 <_printf_i+0x1f4>
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	b004      	add	sp, #16
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f043 0320 	orr.w	r3, r3, #32
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	2778      	movs	r7, #120	@ 0x78
 80041e2:	4832      	ldr	r0, [pc, #200]	@ (80042ac <_printf_i+0x23c>)
 80041e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	6831      	ldr	r1, [r6, #0]
 80041ec:	061f      	lsls	r7, r3, #24
 80041ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80041f2:	d402      	bmi.n	80041fa <_printf_i+0x18a>
 80041f4:	065f      	lsls	r7, r3, #25
 80041f6:	bf48      	it	mi
 80041f8:	b2ad      	uxthmi	r5, r5
 80041fa:	6031      	str	r1, [r6, #0]
 80041fc:	07d9      	lsls	r1, r3, #31
 80041fe:	bf44      	itt	mi
 8004200:	f043 0320 	orrmi.w	r3, r3, #32
 8004204:	6023      	strmi	r3, [r4, #0]
 8004206:	b11d      	cbz	r5, 8004210 <_printf_i+0x1a0>
 8004208:	2310      	movs	r3, #16
 800420a:	e7ab      	b.n	8004164 <_printf_i+0xf4>
 800420c:	4826      	ldr	r0, [pc, #152]	@ (80042a8 <_printf_i+0x238>)
 800420e:	e7e9      	b.n	80041e4 <_printf_i+0x174>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	e7f6      	b.n	8004208 <_printf_i+0x198>
 800421a:	4616      	mov	r6, r2
 800421c:	e7bd      	b.n	800419a <_printf_i+0x12a>
 800421e:	6833      	ldr	r3, [r6, #0]
 8004220:	6825      	ldr	r5, [r4, #0]
 8004222:	1d18      	adds	r0, r3, #4
 8004224:	6961      	ldr	r1, [r4, #20]
 8004226:	6030      	str	r0, [r6, #0]
 8004228:	062e      	lsls	r6, r5, #24
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	d501      	bpl.n	8004232 <_printf_i+0x1c2>
 800422e:	6019      	str	r1, [r3, #0]
 8004230:	e002      	b.n	8004238 <_printf_i+0x1c8>
 8004232:	0668      	lsls	r0, r5, #25
 8004234:	d5fb      	bpl.n	800422e <_printf_i+0x1be>
 8004236:	8019      	strh	r1, [r3, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	4616      	mov	r6, r2
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	e7bc      	b.n	80041ba <_printf_i+0x14a>
 8004240:	6833      	ldr	r3, [r6, #0]
 8004242:	2100      	movs	r1, #0
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	6032      	str	r2, [r6, #0]
 8004248:	681e      	ldr	r6, [r3, #0]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	4630      	mov	r0, r6
 800424e:	f000 f859 	bl	8004304 <memchr>
 8004252:	b108      	cbz	r0, 8004258 <_printf_i+0x1e8>
 8004254:	1b80      	subs	r0, r0, r6
 8004256:	6060      	str	r0, [r4, #4]
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	6123      	str	r3, [r4, #16]
 800425c:	2300      	movs	r3, #0
 800425e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004262:	e7aa      	b.n	80041ba <_printf_i+0x14a>
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	47d0      	blx	sl
 800426e:	3001      	adds	r0, #1
 8004270:	d0ad      	beq.n	80041ce <_printf_i+0x15e>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	079b      	lsls	r3, r3, #30
 8004276:	d413      	bmi.n	80042a0 <_printf_i+0x230>
 8004278:	68e0      	ldr	r0, [r4, #12]
 800427a:	9b03      	ldr	r3, [sp, #12]
 800427c:	4298      	cmp	r0, r3
 800427e:	bfb8      	it	lt
 8004280:	4618      	movlt	r0, r3
 8004282:	e7a6      	b.n	80041d2 <_printf_i+0x162>
 8004284:	2301      	movs	r3, #1
 8004286:	4632      	mov	r2, r6
 8004288:	4649      	mov	r1, r9
 800428a:	4640      	mov	r0, r8
 800428c:	47d0      	blx	sl
 800428e:	3001      	adds	r0, #1
 8004290:	d09d      	beq.n	80041ce <_printf_i+0x15e>
 8004292:	3501      	adds	r5, #1
 8004294:	68e3      	ldr	r3, [r4, #12]
 8004296:	9903      	ldr	r1, [sp, #12]
 8004298:	1a5b      	subs	r3, r3, r1
 800429a:	42ab      	cmp	r3, r5
 800429c:	dcf2      	bgt.n	8004284 <_printf_i+0x214>
 800429e:	e7eb      	b.n	8004278 <_printf_i+0x208>
 80042a0:	2500      	movs	r5, #0
 80042a2:	f104 0619 	add.w	r6, r4, #25
 80042a6:	e7f5      	b.n	8004294 <_printf_i+0x224>
 80042a8:	080044ab 	.word	0x080044ab
 80042ac:	080044bc 	.word	0x080044bc

080042b0 <memmove>:
 80042b0:	4288      	cmp	r0, r1
 80042b2:	b510      	push	{r4, lr}
 80042b4:	eb01 0402 	add.w	r4, r1, r2
 80042b8:	d902      	bls.n	80042c0 <memmove+0x10>
 80042ba:	4284      	cmp	r4, r0
 80042bc:	4623      	mov	r3, r4
 80042be:	d807      	bhi.n	80042d0 <memmove+0x20>
 80042c0:	1e43      	subs	r3, r0, #1
 80042c2:	42a1      	cmp	r1, r4
 80042c4:	d008      	beq.n	80042d8 <memmove+0x28>
 80042c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ce:	e7f8      	b.n	80042c2 <memmove+0x12>
 80042d0:	4601      	mov	r1, r0
 80042d2:	4402      	add	r2, r0
 80042d4:	428a      	cmp	r2, r1
 80042d6:	d100      	bne.n	80042da <memmove+0x2a>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042e2:	e7f7      	b.n	80042d4 <memmove+0x24>

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	2300      	movs	r3, #0
 80042e8:	4d05      	ldr	r5, [pc, #20]	@ (8004300 <_sbrk_r+0x1c>)
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fd fb5e 	bl	80019b0 <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	2000039c 	.word	0x2000039c

08004304 <memchr>:
 8004304:	4603      	mov	r3, r0
 8004306:	b510      	push	{r4, lr}
 8004308:	b2c9      	uxtb	r1, r1
 800430a:	4402      	add	r2, r0
 800430c:	4293      	cmp	r3, r2
 800430e:	4618      	mov	r0, r3
 8004310:	d101      	bne.n	8004316 <memchr+0x12>
 8004312:	2000      	movs	r0, #0
 8004314:	e003      	b.n	800431e <memchr+0x1a>
 8004316:	7804      	ldrb	r4, [r0, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	428c      	cmp	r4, r1
 800431c:	d1f6      	bne.n	800430c <memchr+0x8>
 800431e:	bd10      	pop	{r4, pc}

08004320 <memcpy>:
 8004320:	440a      	add	r2, r1
 8004322:	4291      	cmp	r1, r2
 8004324:	f100 33ff 	add.w	r3, r0, #4294967295
 8004328:	d100      	bne.n	800432c <memcpy+0xc>
 800432a:	4770      	bx	lr
 800432c:	b510      	push	{r4, lr}
 800432e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004332:	4291      	cmp	r1, r2
 8004334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004338:	d1f9      	bne.n	800432e <memcpy+0xe>
 800433a:	bd10      	pop	{r4, pc}

0800433c <_realloc_r>:
 800433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004340:	4680      	mov	r8, r0
 8004342:	4615      	mov	r5, r2
 8004344:	460c      	mov	r4, r1
 8004346:	b921      	cbnz	r1, 8004352 <_realloc_r+0x16>
 8004348:	4611      	mov	r1, r2
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	f7ff bc39 	b.w	8003bc4 <_malloc_r>
 8004352:	b92a      	cbnz	r2, 8004360 <_realloc_r+0x24>
 8004354:	f7ff fbcc 	bl	8003af0 <_free_r>
 8004358:	2400      	movs	r4, #0
 800435a:	4620      	mov	r0, r4
 800435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004360:	f000 f81a 	bl	8004398 <_malloc_usable_size_r>
 8004364:	4285      	cmp	r5, r0
 8004366:	4606      	mov	r6, r0
 8004368:	d802      	bhi.n	8004370 <_realloc_r+0x34>
 800436a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800436e:	d8f4      	bhi.n	800435a <_realloc_r+0x1e>
 8004370:	4629      	mov	r1, r5
 8004372:	4640      	mov	r0, r8
 8004374:	f7ff fc26 	bl	8003bc4 <_malloc_r>
 8004378:	4607      	mov	r7, r0
 800437a:	2800      	cmp	r0, #0
 800437c:	d0ec      	beq.n	8004358 <_realloc_r+0x1c>
 800437e:	42b5      	cmp	r5, r6
 8004380:	462a      	mov	r2, r5
 8004382:	4621      	mov	r1, r4
 8004384:	bf28      	it	cs
 8004386:	4632      	movcs	r2, r6
 8004388:	f7ff ffca 	bl	8004320 <memcpy>
 800438c:	4621      	mov	r1, r4
 800438e:	4640      	mov	r0, r8
 8004390:	f7ff fbae 	bl	8003af0 <_free_r>
 8004394:	463c      	mov	r4, r7
 8004396:	e7e0      	b.n	800435a <_realloc_r+0x1e>

08004398 <_malloc_usable_size_r>:
 8004398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800439c:	1f18      	subs	r0, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bfbc      	itt	lt
 80043a2:	580b      	ldrlt	r3, [r1, r0]
 80043a4:	18c0      	addlt	r0, r0, r3
 80043a6:	4770      	bx	lr

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
